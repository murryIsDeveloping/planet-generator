{"version":3,"sources":["services/eventsService.ts","generators/name/config.ts","generators/name/name.ts","util/noise.ts","util/random.ts","generators/planet/materials.ts","generators/planet/style.ts","generators/planet/planet.ts","generators/planet/config.ts","services/planetService.ts","App/AppToolBar/searchStyles.ts","App/AppToolBar/DimensionSearch.tsx","App/AppToolBar/PlanetSearch.tsx","App/AppToolBar/AppToolBar.tsx","renderer/mesh.ts","renderer/scene.ts","hooks/useObservable.ts","App/Planet/PlanetRendering.tsx","App/Planet/DimensionRules.tsx","App/Planet/PlanetDetails.tsx","App/App.tsx","serviceWorker.ts","index.tsx","assets/bg_0.jpg","assets/bg_1.jpg","assets/bg_2.jpg","assets/bg_3.jpg","assets/bg_4.jpg"],"names":["eventsService","typing$","BehaviorSubject","tap$","Subject","spaceBar$","fromEvent","document","pipe","withLatestFrom","filter","x","isTyping","code","map","head","tap","preventDefault","screenResize$","window","debounceTime","width","target","innerWidth","height","innerHeight","subscribe","console","log","userTyping","typing","next","userTap","message","asObservable","namingCombinations","prefix","postfix","name","baseNameConfig","exclude","Set","prefixName","prefixValue","config","postfixName","postfixValue","DIMENSION_NAMING","A","D","E","random","type","list","Math","floor","length","nameGenerator","dimension","split","toUpperCase","identity","reduce","transform","dimensionConfig","isEmpty","getName","has","Noise","seed","noiseScale","noise","this","SimplexNoise","vector","noise3D","y","z","NumberSeed","value","sum","b64","btoa","i","charCodeAt","dec","decAsString","toString","rgbFactory","Color","terrainColors","avgColors","offset","color","push","waterMaterial","metalness","opacity","roughness","flatShading","transparent","ringMaterial","blackHoleMaterial","terrainMaterial","metalic","vertexColors","planetMaterials","terrain","water","ring","blackhole","planetStyle","planetConfig","xSeed","transformation","transformations","detail","waterDetail","radius","add","waterRadiusDif","lt","waterOpacity","ringOpacity","ringRadiusDif","ringSize","evolve","multiplyConfig","materials","colors","Planet","price","status","style","resources","liquid","gas","minerals","calculate","setStatus","calculateDetails","supernovaPercent","soldPercent","calculateResources","calculatePrice","level","calculateMinerals","amountOfMaterials","round","resource","amount","planet","multiper","prop","multipier","multiply","DIMENSION_TRANSFORMATIONS","B","C","background","F","validName","correctNaming","startsWith","endsWith","validNaming","basePlanetConfig","planetService","initName","nameInput$","dimensionInput$","inputTransformations","trim","distinctUntilChanged","dimension$","startWith","genNameTap$","equals","nameGenerator$","merge","last","name$","shareReplay","planet$","combineLatest","setName","setDimension","renderSize$","lg","min","InputStyles","makeStyles","theme","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginLeft","breakpoints","up","spacing","searchIcon","padding","pointerEvents","display","alignItems","justifyContent","inputRoot","inputInput","paddingLeft","transition","transitions","create","DimensionSearch","classes","useState","updateDimension","className","Fingerprint","InputBase","placeholder","root","input","inputProps","onChange","evt","test","onFocus","onBlur","PlanetSearch","updateName","useEffect","sub","unsubscribe","Public","useStyles","flexGrow","title","fontSize","fontFamily","join","textAlign","AppToolBar","Fragment","AppBar","Toolbar","Typography","variant","noWrap","MeshName","MeshRenderer","blackHoleMesh","planetMesh","mesh","terrainMesh","waterMesh","ringMesh","IcosahedronGeometry","generateTerrain","paintTerrain","material","MeshStandardMaterial","elementsNeedUpdate","Mesh","TERRAIN","WATER","TorusGeometry","rotation","RING","geometry","TorusKnotBufferGeometry","BLACKHOLE","face","lenOf","vertices","forEach","vertex","set","setLength","newLength","faces","faceLength","adjustedLength","originalLength","find","backgrounds","BG0","BG1","BG2","BG3","BG4","planetScene","init","scene","Scene","renderer","WebGLRenderer","camera","PerspectiveCamera","superNovaMesh","meshRenderer","backgroundImage","widthSub","domElement","mount","setBackground","setSize","appendChild","light","DirectionalLight","normalize","animate","index","image","texture","TextureLoader","load","removeActiveMesh","remove","requestAnimationFrame","render","useObservable","observable","state","setState","wrapper","overflow","banner","textTransform","top","left","PlanetRendering","useRef","current","createScene","addPlanet","onTouchEnd","_","ref","rules","right","DimensionRules","open","setOpen","handleClose","Button","onClick","Dialog","onClose","DialogTitle","id","DialogContent","DialogContentText","DialogActions","details","letterSpacing","listStyle","fontWeight","PlanetDetails","noDetails","toLocaleString","val","key","resourceLevel","extendedStatus","gridTemplateColumns","gridTemplateRows","down","flexDirection","spaceBar","gridColumnStart","gridColumnEnd","cursor","App","Boolean","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","module","exports"],"mappings":"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","file":"static/js/main.f5e8ab79.chunk.js","sourcesContent":["import { head } from 'ramda';\nimport { Subject, fromEvent, BehaviorSubject } from 'rxjs';\nimport { filter, map, tap, withLatestFrom, debounceTime } from 'rxjs/operators';\n\nexport const eventsService = function(){\n    const typing$ = new BehaviorSubject<boolean>(false)\n    const tap$ = new Subject()\n\n    const spaceBar$ = fromEvent<KeyboardEvent>(document, 'keydown').pipe(\n        withLatestFrom(typing$),\n        filter(([x, isTyping]) => x.code === \"Space\" && !isTyping),\n        map(head),\n        tap((x: KeyboardEvent) => x.preventDefault())\n    )\n\n    const screenResize$ = fromEvent(window, 'resize').pipe(\n        debounceTime(300),\n        map((x: any) => ({\n                width: x.target.innerWidth,\n                height: x.target.innerHeight\n        }))\n    );\n\n    screenResize$.subscribe((x) => console.log(x))\n\n    return {\n        userTyping: (typing: boolean) => typing$.next(typing),\n        userTap: (message: \"generate planet\") => tap$.next(message),\n        typing$: typing$.asObservable(),\n        spaceBar$: spaceBar$, \n        tap$: tap$.asObservable(),\n        screenResize$: screenResize$,\n    }\n}()","import { pipe, identity } from \"ramda\";\n\nconst FOC = [\n  \"Murry\",\n  \"Jemaine\",\n  \"Bret\",\n  \"Dave\",\n  \"Eugene\",\n  \"Jim\",\n  \"Mel\",\n  \"Greg\",\n];\nconst SW = [\n  \"Darth Vader\",\n  \"Leia\",\n  \"Rey\",\n  \"Luke Skywalker\",\n  \"Obi-Wan Kenobi\",\n  \"Yoda\",\n  \"Chewbacca\",\n  \"Han Solo\",\n  \"RD-D2\",\n  \"C3P0\",\n  \"Jar Jar Binks\",\n  \"Jaba the Hut\",\n  \"Boba Fett\",\n  \"General Grievous\",\n  \"BB-8\",\n  \"Darth Maul\",\n  \"Mace Windu\",\n  \"Jango Fett\",\n  \"Admiral Ackbar\"\n];\nconst RM = [\"Rick\", \"Morty\", \"Summer\", \"Beth\", \"Jerry\", \"Sqanchy\", \"Jessica\", \"Bird Person\", \"Mr Poopybutthole\"];\n\nexport const namingCombinations = {\n    prefix: [\"\", \"Planet \", \"Quadrant \"],\n    postfix: [\"\", \" World\", \" Land\"],\n    name: [...FOC, ...SW, ...RM]\n}\n\ntype NameConfig = { prefix: string; postfix: string; exclude: Set<string> };\n\nconst baseNameConfig = {\n  prefix: \"\",\n  postfix: \"\",\n  exclude: new Set(),\n};\n\nconst prefixName = (prefixValue: string) => (config: NameConfig) => ({\n  ...config,\n  prefix: prefixValue + config.prefix,\n});\n\nconst postfixName = (postfixValue: string) => (config: NameConfig) => ({\n  ...config,\n  postfix: config.postfix + postfixValue,\n});\n\nconst DIMENSION_NAMING = {\n  \"0\": postfixName(\"!\"),\n  A: postfixName(\" Land\"),\n  D: prefixName(\"Sm-\"),\n  E: pipe(prefixName(\"[ \"), postfixName(\" ]\")),\n};\n\nexport const dimensionConfig = (name: string) : NameConfig => {\n  const namingConvenions = name.split(\"\").map((x) => DIMENSION_NAMING[x.toUpperCase()] || identity);\n\n  return namingConvenions.reduce(\n    (config, transform) => transform(config),\n    baseNameConfig\n  );\n};\n","import { isEmpty } from \"ramda\";\nimport { dimensionConfig, namingCombinations } from \"./config\";\n\n\nfunction getName(exclude: Set<string>) {\n    const name = random(\"name\");\n    return exclude.has(name) ? getName(exclude) : name;\n}\n\nfunction random(type: \"prefix\" | \"postfix\" | \"name\"){\n    const list = namingCombinations[type];\n    const index = Math.floor(Math.random()*list.length);\n    return list[index];\n}\n\nexport function nameGenerator(dimension: string){\n    const config = dimensionConfig(dimension)\n    const prefix = isEmpty(config.prefix) ? random(\"prefix\") : config.prefix\n    const postfix = isEmpty(config.postfix) ? random(\"postfix\") : config.postfix\n    const name = getName(config.exclude)\n    return prefix + name + postfix;\n}","import SimplexNoise from 'simplex-noise';\nimport { Vector3 } from \"three\";\n\nexport class Noise {\n  noise: SimplexNoise;\n  noiseScale: number;\n  constructor(seed: string, noiseScale: number) {\n    this.noise = new SimplexNoise(seed);\n    this.noiseScale = noiseScale;\n  }\n\n  set(vector: Vector3) {\n    return (\n      this.noise.noise3D(\n        vector.x * this.noiseScale,\n        vector.y * this.noiseScale,\n        vector.z * this.noiseScale\n      ) /\n        2 +\n      0.5\n    );\n  }\n}\n","export class NumberSeed {\n    constructor(private value: string){}\n\n    next(){\n        let sum = 0;\n    \n        // convert seed to base64 help randomise chars\n        // min max of chars in the unicode chars that use b64 chars\n        const b64 = btoa(this.value),\n            min = 32,\n            max = 90,\n            normalize = (val: number) => (val - min) / (max - min);\n    \n        // sum normalized numbers together\n        for(let i = 0; i < b64.length; i++){\n            let code = b64.charCodeAt(i);\n            let normalised = code >= max ? 0.99999 : code <= min ? 0.00001 : normalize(code)\n            sum += normalised;\n        }\n    \n        // mod by one to give whatever is left over which will give a random num between 0 and 0.9999999999999\n        // Will never return 1\n        const dec = sum%1;\n        const decAsString = dec.toString();\n        this.value += decAsString[decAsString.length-1];\n        return dec;\n    }\n}\n\n\n// Same Function using a generator\nexport function* seedGenerator(value: string) {    \n    const b64 = btoa(value),\n        min = 32,\n        max = 90,\n        normalize = (val: number) => (val - min) / (max - min);\n\n    let sum = 0;\n    for(let i = 0; i < b64.length; i++){\n        let code = b64.charCodeAt(i);\n        let normalised = code >= max ? 0.99999 : code <= min ? 0.00001 : normalize(code)\n        sum += normalised;\n    }\n\n    const dec = sum%1;\n    yield dec;\n    const decAsString = dec.toString();\n    yield* seedGenerator(value + decAsString[decAsString.length-1]);\n}","import { PlanetConfig } from './config';\nimport { MeshStandardMaterialParameters } from \"three\";\n\nimport { Color } from \"three\";\nimport { NumberSeed } from \"../../util\";\n\nfunction rgbFactory(seed: NumberSeed): Color {\n  return new Color(seed.next() * 0xffffff);\n}\n\nexport type TerrainColors = { offset: number, color: Color }[]\n\nexport function terrainColors(seed: NumberSeed, avgColors = 2): TerrainColors {\n  let offset = 0;\n\n  const terrainColors = [];\n\n  while (offset < 1) {\n    offset += seed.next() / avgColors;\n\n    let color = rgbFactory(seed);\n\n    terrainColors.push({\n      offset: offset > 1 ? 1 : offset,\n      color,\n    });\n  }\n\n  return terrainColors;\n}\n\nfunction waterMaterial(seed: NumberSeed): MeshStandardMaterialParameters {\n  return {\n    metalness: seed.next() * 0.4,\n    opacity: (seed.next()/2) + 0.3,\n    roughness: seed.next() * 1,\n    flatShading: true,\n    transparent: true,\n    color: rgbFactory(seed),\n  };\n}\n\nfunction ringMaterial(seed: NumberSeed): MeshStandardMaterialParameters {\n  return {\n    opacity: seed.next(),\n    roughness: seed.next() * 2,\n    flatShading: true,\n    transparent: true,\n    color: rgbFactory(seed),\n  };\n}\n\nfunction blackHoleMaterial(seed: NumberSeed): MeshStandardMaterialParameters {\n  return {\n    metalness: seed.next(),\n    opacity: 0.9,\n    roughness: seed.next() * 2,\n    flatShading: true,\n    transparent: true,\n    color: new Color(0x333333),\n  };\n}\n\n\nfunction terrainMaterial(seed: NumberSeed, metalic: number): MeshStandardMaterialParameters {\n  return {\n    metalness: metalic * 0.5,\n    roughness: seed.next() * 1,\n    flatShading: true,\n    color: rgbFactory(seed),\n    vertexColors: true,\n  };\n}\n\n\n\n\nexport type PlanetMaterialConfig = {\n    terrain: MeshStandardMaterialParameters,\n    water: MeshStandardMaterialParameters,\n    ring: MeshStandardMaterialParameters,\n    blackhole: MeshStandardMaterialParameters,\n}\n\nexport function planetMaterials(seed: NumberSeed, {metalic}: PlanetConfig): PlanetMaterialConfig {\n    return {\n        terrain: terrainMaterial(seed, metalic),\n        water: waterMaterial(seed),\n        ring: ringMaterial(seed),\n        blackhole: blackHoleMaterial(seed),\n    }\n}","import { PlanetConfig, PlanetStatus } from \"./config\";\nimport {\n  planetMaterials,\n  terrainColors,\n  TerrainColors,\n  PlanetMaterialConfig,\n} from \"./materials\";\nimport { NumberSeed } from \"./../../util/random\";\nimport { evolve, identity, add, lt } from \"ramda\";\n\nexport const multiplyConfig = (\n  seed: NumberSeed,\n  planetConfig: PlanetConfig\n) => {\n  const xSeed = (transformation) => (value) =>\n    transformation(seed.next() * value);\n\n  const transformations = {\n    metalic: xSeed(identity),\n    noiseScale: xSeed(identity),\n    detail: xSeed(Math.floor),\n    waterDetail: xSeed(Math.floor),\n    height: xSeed(identity),\n    radius: xSeed(add(1)),\n    waterRadiusDif: xSeed(identity),\n    ring: xSeed(lt(0.5)),\n    water: xSeed(lt(0.5)),\n    waterOpacity: xSeed(identity),\n    ringOpacity: xSeed(identity),\n    ringRadiusDif: xSeed(identity),\n    ringSize: xSeed(identity),\n  };\n\n  return evolve(transformations, planetConfig);\n};\n\nexport type PlanetStyle = {\n  background: number;\n  colors: TerrainColors;\n  detail: number;\n  height: number;\n  materials: PlanetMaterialConfig;\n  name: string;\n  noiseScale: number;\n  price: number;\n  radius: number;\n  ring: boolean;\n  ringOpacity: number;\n  ringSize: number;\n  ringRadiusDif: number;\n  soldPercent: number;\n  status: PlanetStatus;\n  supernovaPercent: number;\n  validName: boolean;\n  water: boolean;\n  waterDetail: number;\n  waterOpacity: number;\n  waterRadiusDif: number;\n};\n\nexport const planetStyle = (planetConfig: PlanetConfig) : PlanetStyle => {\n  const seed = new NumberSeed(planetConfig.name.toUpperCase());\n  return {\n    ...multiplyConfig(seed, planetConfig),\n    materials: planetMaterials(seed, planetConfig),\n    colors: terrainColors(seed),\n  };\n};\n","import { PlanetConfig, PlanetStatus } from \"./config\";\nimport { NumberSeed } from \"./../../util\";\nimport { planetStyle, PlanetStyle } from \"./style\";\n\ntype PlanetResources = {\n  liquid: number;\n  gas: number;\n  minerals: number;\n  ring: number;\n};\n\nexport class Planet {\n  public name = this.planetConfig.name;\n  public price: number = 0;\n  public status: PlanetStatus;\n\n  private seed = new NumberSeed(this.name.toUpperCase());\n  public style: PlanetStyle;\n  private resources: PlanetResources = {\n    liquid: 0,\n    gas: 0,\n    minerals: 0,\n    ring: 0,\n  };\n\n  constructor(private planetConfig: PlanetConfig) {\n    this.calculate();\n  }\n\n  private calculate() {\n    this.setStatus();\n    if (this.status !== \"Not Found\") {\n      this.style = planetStyle(this.planetConfig);\n      this.calculateDetails();\n    }\n  }\n\n  private setStatus() {\n    if (this.planetConfig.status) {\n      this.status = this.planetConfig.status;\n    } else {\n      const value = this.seed.next();\n      this.status =\n        value < this.planetConfig.supernovaPercent\n          ? \"Supernova'd\"\n          : value < this.planetConfig.soldPercent\n          ? \"Sold\"\n          : \"For Sale\";\n    }\n  }\n\n  private calculateDetails() {\n    this.resources = this.calculateResources();\n    this.price = this.calculatePrice(this.resources);\n  }\n\n  private calculateResources(): PlanetResources {\n    const waterOpacity = this.style.materials.water.opacity;\n    const ringOpacity = this.style.materials.ring.opacity;\n    const liquid = this.style.water && waterOpacity >= 0.5;\n    const gas = this.style.water && waterOpacity < 0.5;\n    const level = this.style.waterRadiusDif + this.style.height * 2;\n\n    return {\n      liquid: liquid ? level : 0,\n      gas: gas ? level : 0,\n      minerals: this.calculateMinerals(),\n      ring: this.style.ring ? ringOpacity/2 * this.style.ringSize : 0,\n    };\n  }\n\n  private calculateMinerals() {\n    const amountOfMaterials = this.style.colors.length / 8;\n    const radius = this.style.radius;\n    const metalness = this.style.materials.terrain.metalness;\n    return (metalness * 3 * amountOfMaterials * radius) / 2;\n  }\n\n  private calculatePrice(resources: PlanetResources) {\n    return Math.round(\n      (resources.gas +\n        resources.liquid +\n        resources.minerals * 5 +\n        resources.ring) *\n        100 *\n        this.planetConfig.price\n    ) * 10000;\n  }\n\n  public resourceLevel(resource: \"liquid\" | \"gas\" | \"minerals\" | \"ring\") {\n    const amount = this.resources[resource];\n    if (amount < 0.2) return \"None\";\n    if (amount < 0.4) return \"Low\";\n    if (amount < 0.6) return \"Medium\";\n    if (amount < 0.8) return \"High\";\n    return \"Very High\";\n  }\n}\n","import { add, multiply, pipe, evolve, identity } from \"ramda\";\n\nexport type PlanetStatus =\n  | \"For Sale\"\n  | \"Sold\"\n  | \"Supernova'd\"\n  | \"Not Found\"\n  | null;\n\nexport type PlanetConfig = {\n  metalic: number;\n  status: PlanetStatus;\n  validName: boolean;\n  prefix: string;\n  postfix: string;\n  name: string; // name of planet\n  background: number; // background to scene\n  noiseScale: number; // max amount of noise\n  detail: number; // max detail\n  waterDetail: number; // max detail\n  height: number; // max terrain height\n  radius: number; // max radius - 1\n  waterRadiusDif: number; // difference from radius\n  ring: number; // percent chance of ring\n  water: number; // percent chance of water\n  waterOpacity: number; // water opacity multiplier\n  ringOpacity: number; // ring opacity multiplier\n  ringRadiusDif: number;\n  ringSize: number;\n  soldPercent: number; // percent chance of being sold\n  supernovaPercent: number; // percent chance of supernova\n  price: number; // price multiplier\n};\n\nconst basePlanetConfig = (name: string): PlanetConfig => ({\n  metalic: 1,\n  status: null,\n  validName: true,\n  prefix: \"\",\n  postfix: \"\",\n  name: name,\n  background: 0,\n  noiseScale: 2,\n  detail: 30,\n  waterDetail: 30,\n  height: 0.5,\n  radius: 2,\n  waterRadiusDif: 0,\n  ring: 0.7,\n  water: 1,\n  waterOpacity: 1,\n  ringOpacity: 1,\n  ringRadiusDif: 1,\n  ringSize: 1,\n  soldPercent: 0.25,\n  supernovaPercent: 0.025,\n  price: 1,\n});\n\nconst prefixName = (prefixValue: string) => (planet: PlanetConfig) => {\n    return {\n      ...planet,\n      prefix: prefixValue + planet.prefix\n    };\n};\n\nconst postfixName = (postfixValue: string) => (planet: PlanetConfig) => {\n  return {\n    ...planet,\n    postfix: planet.postfix + postfixValue,\n  };\n};\n\nconst multiper = (prop: string, multipier: number) =>\n  evolve({\n    [prop]: multiply(multipier),\n  });\n\nconst DIMENSION_TRANSFORMATIONS = {\n  \"0\": postfixName(\"!\"),\n  \"1\": multiper(\"ring\", 1.2),\n  \"2\": multiper(\"water\", 0.7),\n  \"3\": multiper(\"radius\", 0.7),\n  \"4\": multiper(\"price\", 0.75),\n  \"5\": multiper(\"price\", 1.2),\n  \"6\": multiper(\"metalic\", 1.15),\n  \"7\": evolve({\n    detail: multiply(1.2),\n    waterDetail: multiply(1.2),\n    price: multiply(1.1),\n  }),\n  \"8\": multiper(\"soldPercent\", 0.3),\n  \"9\": multiper(\"supernovaPercent\", 5),\n  A: postfixName(\" Land\"),\n  B: evolve({\n    detail: multiply(0.8),\n    waterDetail: multiply(0.8),\n    price: multiply(0.8),\n  }),\n  // update background to cats\n  C: evolve({\n    background: add(1),\n  }),\n  D: prefixName(\"Sm-\"),\n  // everythings in a box\n  E: pipe(\n    prefixName(\"[ \"), \n    postfixName(\" ]\"), \n    evolve({ \n      detail: multiply(0.5), \n      waterDetail: multiply(0.5) \n    })\n  ),\n  // fart dimension lower price greater gas radius and chance of gas\n  F: evolve({\n    price: multiply(0.9),\n    water: multiply(1.1),\n    waterRadiusDif: add(0.2),\n  }),\n};\n\nconst validNaming = (config: PlanetConfig) => {\n  const { name, prefix, postfix, validName } = config;\n  const correctNaming = name.startsWith(prefix) && name.endsWith(postfix);\n  return {\n    ...config,\n    status: correctNaming && validName ? config.status : \"Not Found\"\n  }\n\n}\n\nexport function planetConfig(name: string, dimension: string): PlanetConfig {\n  const transformations = dimension\n    .split(\"\")\n    .map((x) => DIMENSION_TRANSFORMATIONS[x.toUpperCase()] || identity);\n\n  const config = transformations.reduce(\n    (config, transform) => transform(config),\n    basePlanetConfig(name)\n  );\n\n  // reset name for easy use\n  return validNaming(config)\n}\n\n","import { Planet, nameGenerator, planetConfig } from \"./../generators\";\nimport { combineLatest, merge, pipe, Subject } from \"rxjs\";\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  withLatestFrom,\n  shareReplay,\n} from \"rxjs/operators\";\n\nimport { equals, last, trim } from \"ramda\";\nimport { eventsService } from \"./eventsService\";\n\nexport const planetService = function(eventsService){\n  const initDimension = \"\";\n  const initName = nameGenerator(\"\");\n\n  const nameInput$ = new Subject<string>();\n  const dimensionInput$ = new Subject<string>();\n\n  const inputTransformations = pipe(debounceTime(500), map(trim), distinctUntilChanged())\n\n  const dimension$ = dimensionInput$.pipe(inputTransformations, startWith(initDimension));\n\n  const genNameTap$ = eventsService.tap$.pipe(\n    filter(equals(\"generate planet\"))\n  );\n\n  const nameGenerator$ = merge(\n    eventsService.spaceBar$, \n    genNameTap$,\n  ).pipe(\n    withLatestFrom(eventsService.typing$),\n    filter(([_, typing]) => !typing),\n    withLatestFrom(dimension$),\n    map(last),\n    map(nameGenerator)\n  )\n\n  const name$ = merge(\n    nameInput$.pipe(inputTransformations),\n    nameGenerator$,\n  ).pipe(\n    startWith(initName), \n    shareReplay(1)\n  );\n  \n  const planet$ = combineLatest([name$, dimension$]).pipe(\n    map(([name, dimension]) => planetConfig(name, dimension)),\n    map((x) => new Planet(x)),\n    shareReplay(1),\n  );\n\n  const renderSize$ = eventsService.screenResize$.pipe(\n    startWith({height: window.innerHeight, width: window.innerWidth}),\n    map(({height, width}) => {\n    const lg = Math.min((width/2)-80, height-75);\n    return width >= 960 ? lg : width\n  }));\n\n  return {\n    setName: (value: string) => nameInput$.next(value),\n    setDimension: (value: string) => dimensionInput$.next(value),\n    renderSize$,\n    planet$,\n    name$\n  }\n}(eventsService)\n","import { makeStyles } from \"@material-ui/core\";\nimport { fade } from \"@material-ui/core/styles\";\n\nexport const InputStyles = makeStyles((theme) => ({\n  search: {\n    position: \"relative\",\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    \"&:hover\": {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    marginLeft: 0,\n    width: \"100%\",\n    [theme.breakpoints.up(\"sm\")]: {\n      marginLeft: theme.spacing(1),\n    },\n  },\n  searchIcon: {\n    padding: theme.spacing(0, 2),\n    height: \"100%\",\n    position: \"absolute\",\n    pointerEvents: \"none\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  inputRoot: {\n    color: \"inherit\",\n    width: \"100%\",\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 0),\n    // vertical padding + font size from searchIcon\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n    transition: theme.transitions.create(\"width\"),\n    width: \"100%\"\n  },\n}));\n","import React, { useState } from \"react\";\nimport { planetService, eventsService } from \"src/services\";\nimport { InputBase } from \"@material-ui/core\";\nimport { Fingerprint } from \"@material-ui/icons\";\nimport { InputStyles } from \"./searchStyles\";\n\nexport default function DimensionSearch() {\n  const classes = InputStyles();\n  const [dimension, updateDimension] = useState(\"\");\n\n  function dimensionName(evt: any) {\n    const name = evt.target.value;\n    if (/^[0-9a-fA-F]+$/.test(name) || name === \"\") {\n      updateDimension(name);\n      planetService.setDimension(name);\n    }\n  }\n\n  return (\n    <div className={classes.search}>\n      <div className={classes.searchIcon}>\n        <Fingerprint />\n      </div>\n      <InputBase\n        placeholder=\"Dimension\"\n        classes={{\n          root: classes.inputRoot,\n          input: classes.inputInput,\n        }}\n        inputProps={{ \"aria-label\": \"Search Dimensions\" }}\n        onChange={dimensionName}\n        onFocus={() => eventsService.userTyping(true)}\n        onBlur={() => eventsService.userTyping(false)}\n        value={dimension}\n      />\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { planetService, eventsService } from \"src/services\";\nimport { Public } from \"@material-ui/icons\";\nimport { InputBase } from \"@material-ui/core\";\nimport { InputStyles } from \"./searchStyles\"\n\nexport default function PlanetSearch() {\n  const classes = InputStyles();\n  const [name, updateName] = useState(\"\");\n\n  useEffect(() => {\n    const sub = planetService.name$.subscribe(updateName);\n    return () => sub.unsubscribe();\n  }, []);\n\n  function setPlanet(evt: any) {\n    const name = evt.target.value;\n    updateName(name);\n    planetService.setName(name);\n  }\n\n  return (\n    <div className={classes.search}>\n      <div className={classes.searchIcon}>\n        <Public />\n      </div>\n      <InputBase\n        placeholder=\"Planet\"\n        classes={{\n          root: classes.inputRoot,\n          input: classes.inputInput,\n        }}\n        inputProps={{ \"aria-label\": \"Search Planets\" }}\n        onChange={setPlanet}\n        onFocus={() => eventsService.userTyping(true)}\n        onBlur={() => eventsService.userTyping(false)}\n        value={name}\n      />\n    </div>\n  );\n}\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport DimensionSearch from './DimensionSearch';\nimport PlanetSearch from './PlanetSearch';\n\nconst useStyles = makeStyles({\n  root: {\n    flexGrow: 1,\n  },\n  title: {\n    fontSize: \"30px\",\n    fontFamily: [\"Anton\", \"san-serif\"].join(\",\"),\n    textAlign: 'left',\n    width: '100%',\n  },\n});\n\nexport default function AppToolBar() {\n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n    <header className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography className={classes.title} variant=\"h6\" noWrap>\n            Ray Lightyear\n          </Typography>\n          <PlanetSearch></PlanetSearch>\n          <DimensionSearch></DimensionSearch>\n        </Toolbar>\n      </AppBar>\n    </header>\n    </React.Fragment>\n  );\n}","import { PlanetStyle } from './../generators/planet/style';\nimport { Noise } from \"./../util/noise\";\nimport { PlanetStatus } from \"../generators/planet/config\";\n\nimport {\n  Face3,\n  IcosahedronGeometry,\n  Mesh,\n  TorusGeometry,\n  MeshStandardMaterial,\n  TorusKnotBufferGeometry,\n} from \"three\";\n\nexport enum MeshName {\n  TERRAIN = \"terrain\",\n  WATER = \"water\",\n  RING = \"ring\",\n  BLACKHOLE = \"black hole\",\n}\n\nexport class MeshRenderer {\n  private style: PlanetStyle;\n\n  public mesh(status: PlanetStatus, style: PlanetStyle) {\n    this.style = style;\n    switch (status) {\n      case \"Not Found\":\n        return [];\n      case \"Supernova'd\":\n        return [this.blackHoleMesh()];\n      default:\n        return this.planetMesh();\n    }\n  }\n\n  private planetMesh() {\n    const mesh = [this.terrainMesh()];\n    if (this.style.water) mesh.push(this.waterMesh());\n    if (this.style.ring) mesh.push(this.ringMesh());\n    return mesh;\n  }\n\n  private terrainMesh(): Mesh {\n    let terrain = new IcosahedronGeometry(this.style.radius, this.style.detail);\n    this.generateTerrain(terrain);\n    this.paintTerrain(terrain);\n    let material = new MeshStandardMaterial(this.style.materials.terrain);\n    terrain.elementsNeedUpdate = true;\n    let mesh = new Mesh(terrain, material);\n    mesh.name = MeshName.TERRAIN;\n    return mesh;\n  }\n\n  private waterMesh(): Mesh {\n    let radius = this.style.radius + this.style.waterRadiusDif;\n    let water = new IcosahedronGeometry(radius, this.style.waterDetail);\n    let material = new MeshStandardMaterial(this.style.materials.water);\n    let mesh = new Mesh(water, material);\n    mesh.name = MeshName.WATER;\n    return mesh;\n  }\n\n  private ringMesh(): Mesh {\n    let radius = this.style.radius + this.style.ringRadiusDif + 0.5\n    let ring = new TorusGeometry(radius, this.style.ringSize, 3, 15);\n    let material = new MeshStandardMaterial(this.style.materials.ring);\n    let mesh = new Mesh(ring, material);\n    mesh.rotation.y += 0.2;\n    mesh.rotation.x += 1.4;\n    mesh.name = MeshName.RING;\n    return mesh;\n  }\n\n  private blackHoleMesh() {\n    let geometry = new TorusKnotBufferGeometry(1, 0.3, 100, 20, 9, 8);\n    let material = new MeshStandardMaterial(this.style.materials.blackhole);\n    let mesh = new Mesh(geometry, material);\n    mesh.name = MeshName.BLACKHOLE;\n    return mesh;\n  }\n\n  private faceLength(geometry: IcosahedronGeometry, face: Face3) {\n    const lenOf = (name: string) => geometry.vertices[face[name]].length();\n    return (lenOf(\"a\") + lenOf(\"b\") + lenOf(\"c\")) / 3;\n  }\n\n  private generateTerrain(terrain: IcosahedronGeometry) {\n    let noise = new Noise(this.style.name.toUpperCase(), this.style.noiseScale);\n    terrain.vertices.forEach((vertex) => {\n      let random = noise.set(vertex);\n      vertex.setLength(this.newLength(random));\n    });\n  }\n\n  private newLength(value: number) {\n    return (value - 0.5) * 2 * this.style.height + this.style.radius;\n  }\n\n  private originalLength(value: number) {\n    return (value - this.style.radius) / 2 / this.style.height + 0.5;\n  }\n\n  private paintTerrain(terrain: IcosahedronGeometry) {\n    for (const face of terrain.faces) {\n      const length = this.faceLength(terrain, face);\n      const adjustedLength = this.originalLength(length);\n      const colorRule = this.style.colors.find(\n        (color) => color.offset >= adjustedLength\n      );\n\n      const color = colorRule.color;\n      face.color = color;\n    }\n  }\n}\n","import { planetService } from 'src/services';\nimport { Planet } from './../generators/planet/planet';\nimport { MeshRenderer, MeshName } from './mesh';\nimport { DirectionalLight, Mesh, PerspectiveCamera, Scene, TextureLoader, WebGLRenderer } from \"three\";\n\nimport BG0 from './../assets/bg_0.jpg';\nimport BG1 from './../assets/bg_1.jpg';\nimport BG2 from './../assets/bg_2.jpg';\nimport BG3 from './../assets/bg_3.jpg';\nimport BG4 from './../assets/bg_4.jpg';\nimport { Subscription } from 'rxjs';\n\nconst backgrounds = [BG0,BG1,BG2,BG3,BG4]\n\nexport class PlanetScene {\n    init = false;\n    scene = new Scene();\n    renderer = new WebGLRenderer();\n    camera = new PerspectiveCamera(75, 1, 0.1, 1000);\n    mesh: Mesh[] = [];\n    superNovaMesh: Mesh;\n    meshRenderer = new MeshRenderer()\n    backgroundImage: string;\n    widthSub: Subscription;\n    width: number;\n\n    constructor(){\n      this.widthSub = planetService.renderSize$.subscribe(width => {\n        this.width = width;\n        if(this.renderer?.domElement) {\n          this.renderer.domElement.style.width = `${this.width}px`;\n          this.renderer.domElement.style.height = `${this.width}px`;\n        }\n      });\n    }\n\n    createScene(mount: any){\n        this.init = true;\n        this.setBackground(0)\n        this.camera.position.z = 6;\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n        mount.appendChild(this.renderer.domElement);\n        var light = new DirectionalLight(0xffffff, 1);\n        light.position.set(0, 2, 2).normalize();\n        this.scene.add(light);\n  \n        this.animate();\n    }\n\n    setBackground(index: number){\n      let image = backgrounds[index%backgrounds.length]\n      if(image !== this.backgroundImage) {\n        var texture = new TextureLoader().load(image)\n        this.scene.background = texture;\n        this.backgroundImage = image;\n      }\n    }\n  \n    addPlanet(planet: Planet) {\n      this.removeActiveMesh()\n      if(planet.status !== \"Not Found\") {\n        this.setBackground(planet.style.background)\n        this.mesh = this.meshRenderer.mesh(planet.status, planet.style)\n        this.mesh.forEach(mesh => this.scene.add(mesh))\n\n        this.renderer.domElement.style.width = `${this.width}px`;\n        this.renderer.domElement.style.height = `${this.width}px`;\n      }\n    }\n  \n    removeActiveMesh() {\n      this.mesh.forEach(mesh => this.scene.remove(mesh));\n    }\n  \n    animate() {\n      const animate = () => {\n        requestAnimationFrame(animate);\n  \n        this.mesh.forEach(mesh => {\n          if(mesh.name === MeshName.TERRAIN || mesh.name === MeshName.WATER) mesh.rotation.y += 0.005\n          if(mesh.name === MeshName.RING || mesh.name === MeshName.BLACKHOLE) mesh.rotation.z += 0.005\n        })\n    \n        this.renderer.render(this.scene, this.camera);\n      }\n\n      animate();\n    }\n  }\n\nexport const planetScene = new PlanetScene();","import { useEffect, useState } from 'react'\nimport { Observable } from 'rxjs';\n\nexport const useObservable = <T>(observable: Observable<T>) => {\n    const [state, setState] = useState<T | undefined>();\n  \n    useEffect(() => {\n      const sub = observable.subscribe(setState);\n      return () => sub.unsubscribe();\n    }, [observable]);\n  \n    return state;\n};","import React, { useRef } from \"react\";\nimport { planetScene } from \"../../renderer/scene\";\nimport { makeStyles } from \"@material-ui/core\";\nimport { useObservable } from \"src/hooks/useObservable\";\nimport { planetService } from \"src/services/planetService\";\nimport { eventsService } from \"src/services\";\n\nconst useStyles = makeStyles({\n  wrapper: {\n    overflow: 'hidden',\n    position: \"relative\",\n  },\n  banner: {\n    position: \"absolute\",\n    fontSize: \"45px\",\n    textTransform: \"uppercase\",\n    backgroundColor: \"red\",\n    color: \"white\",\n    transform: \"rotate(-40deg)\",\n    padding: \"20px 150px\",\n    top: \"70px\",\n    left: \"-135px\",\n    width: \"200px\",\n    textAlign: 'center',\n    fontFamily: [\"Anton\", \"san-serif\"].join(\",\"),\n  },\n});\n\nexport default function PlanetRendering() {\n  const classes = useStyles();\n  const mount = useRef(null);\n  const planet = useObservable(planetService.planet$);\n\n  if (mount.current && !planetScene.init) {\n    planetScene.createScene(mount.current);\n  }\n\n  if (planet) {\n    planetScene.addPlanet(planet);\n  }\n\n  return (\n    <div className={classes.wrapper} onTouchEnd={(_) => eventsService.userTap(\"generate planet\")}>\n      <div className={classes.banner}>{planet?.status}</div>\n      <div ref={mount}></div>\n    </div>\n  );\n}\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  makeStyles,\n} from \"@material-ui/core\";\nimport React, { useState } from \"react\";\n\nconst useStyles = makeStyles({\n  rules: {\n    position: \"absolute\",\n    top: \"10px\",\n    right: \"20px\",\n  },\n});\n\nexport default function DimensionRules() {\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n\n  const handleClose = () => setOpen(false);\n  const handleOpen = () => setOpen(true);\n\n  return (\n    <React.Fragment>\n      <Button className={classes.rules} color=\"primary\" onClick={handleOpen}>\n        Dimension Rules\n      </Button>\n      <Dialog open={open} onClose={handleClose}>\n        <DialogTitle id=\"alert-dialog-title\">Dimension Rules</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n              <p><strong>'0': Enthusiastic Dimension</strong> - Name must end with a !</p> \n              <p><strong>'1': Ring Dimension</strong> - 20% more ringed planets</p> \n              <p><strong>'2': Desert Dimension</strong> - 30% less water</p> \n              <p><strong>'3': Little Bits Dimension</strong> - 30% smaller planets</p> \n              <p><strong>'4': Bit of a dodgy neighbourhood Dimension</strong> - Prices are 25% cheaper</p> \n              <p><strong>'5': Smug Dimension</strong> - Prices are 20% higher</p>  \n              <p><strong>'6': Shiny Dimension</strong> - 15% more minerals</p> \n              <p><strong>'7': It's so detailed Dimension</strong> - 20% more detail 10% more expensive</p> \n              <p><strong>'8': Selling out fase Dimension</strong> - 30% more likely property has already sold</p> \n              <p><strong>'9': Old Dimension</strong> - 5 times as likely property has supernova'd</p> \n              <p><strong>'A': Land Dimension</strong> - Names must end in ' Land'</p> \n              <p><strong>'B': Low Poly Dimension</strong> - 20% less detail and 20% cheaper</p> \n              <p><strong>'C': Schrodinger's Cat Dimension</strong> - Cats everywhere!</p> \n              <p><strong>'D': Sm-Dimension</strong> - Name must start with 'Sm-'</p> \n              <p><strong>'E': Box Dimension</strong> - Name must start with '[' end with ']' half the detail</p> \n              <p><strong>'F': Fart Dimension</strong> - 10% cheaper more water and gas</p> \n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </React.Fragment>\n  );\n}\n","import { makeStyles } from '@material-ui/core';\nimport React from 'react'\nimport { PlanetStatus } from 'src/generators';\nimport { useObservable } from 'src/hooks/useObservable';\nimport { planetService } from 'src/services/planetService';\nimport DimensionRules from './DimensionRules';\n\nconst useStyles = makeStyles({\n    details: {\n        position: \"relative\",\n        padding: \"30px\",\n        letterSpacing: \"3px\",\n    },\n    title: {\n        fontSize: \"34px\",\n    },\n    resources: {\n        listStyle: \"none\",\n        fontSize: \"20px\",\n    },\n    resource: {\n        textTransform: \"capitalize\",\n        fontWeight: \"bold\",\n    }\n  });\n\nconst extendedStatus = (status: PlanetStatus, name: string) => {\n    switch(status){\n        case \"Not Found\":\n            return `I'm afriad that ${name} can't be found`\n        case \"Supernova'd\":\n            return `${name} has Supernova'd. Now it looks like it may just be the beginings of a black hole`\n        default:\n            return `${status}`\n    }\n}\n\nexport default function PlanetDetails(){\n    const classes = useStyles();\n    const planet = useObservable(planetService.planet$);\n    const noDetails = planet?.status === \"Not Found\" || planet?.status === \"Supernova'd\"\n    const price = noDetails ? null : <h2 className={classes.title}>${planet?.price.toLocaleString()}</h2>;\n    const resourceTypes: (\"liquid\" | \"gas\" | \"minerals\" | \"ring\")[] = [\"minerals\", \"liquid\", \"gas\", \"ring\"]\n\n    const resources = noDetails ? null : (\n        <ul className={classes.resources}>\n            {resourceTypes.map((val, index)  => (\n                <li key={index} className={classes.resource}>{val}: {planet?.resourceLevel(val)}</li>\n            ))}\n        </ul>\n    )\n\n    return (\n        <div className={classes.details}>\n            <DimensionRules></DimensionRules>\n            <h1 className={classes.title}>{planet?.name}</h1>\n            {price}\n            <h2>{extendedStatus(planet?.status, planet?.name)}</h2>\n            {resources}\n        </div>\n    ) \n}","import React from \"react\";\nimport AppToolBar from \"./AppToolBar/AppToolBar\";\nimport PlanetRendering from \"./Planet/PlanetRendering\";\nimport PlanetDetails from \"./Planet/PlanetDetails\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { eventsService } from \"./../services\";\n\nconst useStyles = makeStyles((theme) => ({\n  planet: {\n    display: \"grid\",\n    gridTemplateColumns: `auto 1fr`,\n    gridTemplateRows: \"auto auto\",\n    [theme.breakpoints.down(\"sm\")]: {\n      display: \"flex\",\n      flexDirection: \"column\",\n    },\n  },\n  spaceBar: {\n    backgroundColor: \"#ddd\",\n    padding: \"20px\",\n    textAlign: \"center\",\n    gridColumnStart: 1,\n    gridColumnEnd: 3,\n    cursor: \"pointer\",\n  },\n  message: {\n    fontSize: \"27px\",\n    fontWeight: 400\n  }\n}));\n\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <div>\n        <AppToolBar></AppToolBar>\n        <div className={classes.planet}>\n          <PlanetRendering></PlanetRendering>\n          <PlanetDetails></PlanetDetails>\n          <aside className={classes.spaceBar} onClick={() => eventsService.userTap(\"generate planet\")}>\n            <h3 className={classes.message}>Ray Lightyear's Intergalatic and Interdimensional real estate. <br/> Please feel free to browse through our infinite range.</h3>\n            <strong>Click here or use the \"Space\" Bar to randomly search through some of our planets!</strong>\n          </aside>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/bg_0.710cfcbb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg_1.52bbd2e3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg_2.b03cbffa.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg_3.83d9eaaa.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg_4.7faada7a.jpg\";"],"sourceRoot":""}