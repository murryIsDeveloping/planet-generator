{"version":3,"sources":["assets/bg_0.jpg","assets/bg_1.jpg","assets/bg_2.jpg","assets/bg_3.jpg","assets/bg_4.jpg","generators/name/config.ts","generators/name/name.ts","util/noise.ts","util/random.ts","generators/planet/materials.ts","generators/planet/style.ts","generators/planet/planet.ts","generators/planet/config.ts","services/userInputs.ts","services/planetService.ts","App/AppToolBar/searchStyles.ts","App/AppToolBar/DimensionSearch.tsx","App/AppToolBar/PlanetSearch.tsx","App/AppToolBar/AppToolBar.tsx","renderer/mesh.ts","renderer/scene.ts","hooks/useObservable.ts","App/Planet/PlanetRendering.tsx","App/Planet/PlanetDetails.tsx","App/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","value","namingCombinations","prefix","postfix","name","baseNameConfig","exclude","Set","prefixName","prefixValue","config","postfixName","postfixValue","DIMENSION_NAMING","Array","from","A","D","E","pipe","random","type","list","Math","floor","length","nameGenerator","dimension","split","map","x","toUpperCase","identity","reduce","transform","dimensionConfig","isEmpty","getName","has","Noise","seed","noiseScale","noise","this","SimplexNoise","vector","noise3D","y","z","NumberSeed","sum","b64","btoa","i","code","charCodeAt","dec","decAsString","toString","rgbFactory","Color","next","terrainColors","avgColors","offset","color","push","waterMaterial","metalness","opacity","roughness","flatShading","transparent","ringMaterial","blackHoleMaterial","terrainMaterial","metalic","vertexColors","planetMaterials","terrain","water","ring","blackhole","planetStyle","planetConfig","xSeed","transformation","transformations","detail","waterDetail","height","radius","add","waterRadiusDif","lt","waterOpacity","ringOpacity","ringRadiusDif","ringSize","evolve","multiplyConfig","materials","colors","Planet","price","status","style","resources","liquid","gas","minerals","calculate","setStatus","calculateDetails","supernovaPercent","soldPercent","calculateResources","calculatePrice","level","calculateMinerals","amountOfMaterials","round","resource","amount","planet","multiper","prop","multipier","multiply","DIMENSION_TRANSFORMATIONS","B","C","background","F","validName","correctNaming","startsWith","endsWith","validNaming","basePlanetConfig","spaceBar$","fromEvent","document","filter","tap","preventDefault","planetNameInput$","Subject","dimensionNameInput$","typing$","BehaviorSubject","planetName$","debounceTime","trim","distinctUntilChanged","dimensionName$","startWith","planetFromGenerator$","withLatestFrom","last","name$","merge","share","planetService","planet$","combineLatest","shareReplay","demensionName$","setPlanet","setDimension","InputStyles","makeStyles","theme","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginLeft","width","breakpoints","up","spacing","searchIcon","padding","pointerEvents","display","alignItems","justifyContent","inputRoot","inputInput","paddingLeft","transition","transitions","create","DimensionSearch","classes","useState","updateDimension","className","Fingerprint","InputBase","placeholder","root","input","inputProps","onChange","evt","target","test","onFocus","onBlur","PlanetSearch","updateName","useEffect","sub","subscribe","unsubscribe","Public","useStyles","flexGrow","title","fontSize","fontFamily","join","textAlign","AppToolBar","Fragment","AppBar","Toolbar","Typography","variant","noWrap","MeshName","MeshRenderer","blackHoleMesh","planetMesh","mesh","terrainMesh","waterMesh","ringMesh","IcosahedronGeometry","generateTerrain","paintTerrain","material","MeshStandardMaterial","elementsNeedUpdate","Mesh","TERRAIN","WATER","TorusGeometry","rotation","RING","geometry","TorusKnotBufferGeometry","BLACKHOLE","face","lenOf","vertices","forEach","vertex","set","setLength","newLength","faces","faceLength","adjustedLength","originalLength","find","backgrounds","BG0","BG1","BG2","BG3","BG4","planetScene","init","scene","Scene","renderer","WebGLRenderer","camera","PerspectiveCamera","superNovaMesh","meshRenderer","backgroundImage","mount","setBackground","setSize","window","innerWidth","innerHeight","appendChild","domElement","light","DirectionalLight","normalize","animate","index","image","texture","TextureLoader","load","removeActiveMesh","windowWidth","sm","lg","min","remove","requestAnimationFrame","render","useObservable","observable","state","setState","wrapper","overflow","banner","textTransform","top","left","PlanetRendering","useRef","current","createScene","addPlanet","ref","details","letterSpacing","listStyle","fontWeight","PlanetDetails","noDetails","toLocaleString","val","key","resourceLevel","extendedStatus","gridTemplateColumns","gridTemplateRows","down","flexDirection","spaceBarMessage","gridColumnStart","gridColumnEnd","App","Boolean","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,oGCmD1BC,E,uIAxBJC,EAAqB,CAC9BC,OAAQ,CAAC,GAAI,UAAW,aACxBC,QAAS,CAAC,GAAI,SAAU,SACxBC,KAAK,GAAD,OA5BI,CACV,QACA,UACA,OACA,OACA,SACA,MACA,MACA,QAES,CACT,cACA,OACA,MACA,iBACA,iBACA,OACA,YACA,WACA,QACA,OACA,iBAES,CAAC,OAAQ,QAAS,SAAU,OAAQ,QAAS,UAAW,aAU7DC,EAAiB,CACrBH,OAAQ,GACRC,QAAS,GACTG,QAAS,IAAIC,KAGTC,EAAa,SAACC,GAAD,OAAyB,SAACC,GAAD,mBAAC,eACxCA,GADuC,IAE1CR,OAAQO,EAAcC,EAAOR,WAGzBS,EAAc,SAACC,GAAD,OAA0B,SAACF,GAAD,mBAAC,eAC1CA,GADyC,IAE5CP,QAASO,EAAOP,QAAUS,MAQtBC,EAAmB,CACvB,EAAKF,EAAY,KACjB,GAPeX,EAOF,QAPoB,SAACU,GAAD,mBAAC,eAC/BA,GAD8B,IAEjCJ,QAAS,IAAIC,IAAJ,sBAAYO,MAAMC,KAAKL,EAAOJ,UAA9B,CAAwCN,SAMjDgB,EAAGL,EAAY,SACfM,EAAGT,EAAW,MAEdU,EAAGC,YAAKX,EAAW,MAAOG,EAAY,QCrDxC,SAASS,EAAOC,GACZ,IAAMC,EAAOrB,EAAmBoB,GAEhC,OAAOC,EADOC,KAAKC,MAAMD,KAAKH,SAASE,EAAKG,SAIzC,SAASC,EAAcC,GAC1B,IAAMjB,EDiDqB,SAACN,GAG9B,OAFyBA,EAAKwB,MAAM,IAAIC,KAAI,SAACC,GAAD,OAAOjB,EAAiBiB,EAAEC,gBAAkBC,OAEhEC,QACtB,SAACvB,EAAQwB,GAAT,OAAuBA,EAAUxB,KACjCL,GCtDe8B,CAAgBR,GACzBzB,EAASkC,YAAQ1B,EAAOR,QAAUkB,EAAO,UAAYV,EAAOR,OAC5DC,EAAUiC,YAAQ1B,EAAOP,SAAWiB,EAAO,WAAaV,EAAOP,QAErE,OAAOD,EAhBX,SAASmC,EAAQ/B,GACb,IAAMF,EAAOgB,EAAO,QACpB,OAAOd,EAAQgC,IAAIlC,GAAQiC,EAAQ/B,GAAWF,EAajCiC,CAAQ3B,EAAOJ,SACLH,E,mCCjBdoC,EAAb,WAGE,WAAYC,EAAcC,GAAqB,yBAF/CC,WAE8C,OAD9CD,gBAC8C,EAC5CE,KAAKD,MAAQ,IAAIE,IAAaJ,GAC9BG,KAAKF,WAAaA,EALtB,gDAQMI,GACF,OACEF,KAAKD,MAAMI,QACTD,EAAOf,EAAIa,KAAKF,WAChBI,EAAOE,EAAIJ,KAAKF,WAChBI,EAAOG,EAAIL,KAAKF,YAEhB,EACF,OAhBN,KCHaQ,G,MAAb,WACI,WAAoBjD,GAAe,yBAAfA,QADxB,mDAcQ,IAVA,IAAIkD,EAAM,EAIJC,EAAMC,KAAKT,KAAK3C,OAMdqD,EAAI,EAAGA,EAAIF,EAAI1B,OAAQ4B,IAAI,CAC/B,IAAIC,EAAOH,EAAII,WAAWF,GAE1BH,GADiBI,GANX,GAMyB,OAAUA,GAPnC,GAOiD,MAAoBA,EAPrE,IAEuB,GAWjC,IAAME,EAAMN,EAAI,EACVO,EAAcD,EAAIE,WAExB,OADAf,KAAK3C,OAASyD,EAAYA,EAAYhC,OAAO,GACtC+B,MAzBf,M,YCMA,SAASG,EAAWnB,GAClB,OAAO,IAAIoB,IAAoB,SAAdpB,EAAKqB,QAKjB,SAASC,EAActB,GAK5B,IAL6E,IAA/BuB,EAA8B,uDAAlB,EACtDC,EAAS,EAEPF,EAAgB,GAEfE,EAAS,GAAG,CACjBA,GAAUxB,EAAKqB,OAASE,EAExB,IAAIE,EAAQN,EAAWnB,GAEvBsB,EAAcI,KAAK,CACjBF,OAAQA,EAAS,EAAI,EAAIA,EACzBC,UAIJ,OAAOH,EAGT,SAASK,EAAc3B,GACrB,MAAO,CACL4B,UAAyB,GAAd5B,EAAKqB,OAChBQ,QAAU7B,EAAKqB,OAAO,EAAK,GAC3BS,UAAyB,EAAd9B,EAAKqB,OAChBU,aAAa,EACbC,aAAa,EACbP,MAAON,EAAWnB,IAItB,SAASiC,EAAajC,GACpB,MAAO,CACL6B,QAAS7B,EAAKqB,OACdS,UAAyB,EAAd9B,EAAKqB,OAChBU,aAAa,EACbC,aAAa,EACbP,MAAON,EAAWnB,IAItB,SAASkC,EAAkBlC,GACzB,MAAO,CACL4B,UAAW5B,EAAKqB,OAChBQ,QAAS,GACTC,UAAyB,EAAd9B,EAAKqB,OAChBU,aAAa,EACbC,aAAa,EACbP,MAAO,IAAIL,IAAM,UAKrB,SAASe,EAAgBnC,EAAkBoC,GACzC,MAAO,CACLR,UAAqB,GAAVQ,EACXN,UAAyB,EAAd9B,EAAKqB,OAChBU,aAAa,EACbN,MAAON,EAAWnB,GAClBqC,cAAc,GAcX,SAASC,EAAgBtC,EAAzB,GACH,MAAO,CACHuC,QAASJ,EAAgBnC,EAFgE,EAA9CoC,SAG3CI,MAAOb,EAAc3B,GACrByC,KAAMR,EAAajC,GACnB0C,UAAWR,EAAkBlC,I,+BC7BxB2C,EAAc,SAACC,GAC1B,IAAM5C,EAAO,IAAIS,EAAWmC,EAAahF,KAAK2B,eAC9C,OAAO,2BApDqB,SAC5BS,EACA4C,GAEA,IAAMC,EAAQ,SAACC,GAAD,OAAoB,SAACtF,GAAD,OAChCsF,EAAe9C,EAAKqB,OAAS7D,KAEzBuF,EAAkB,CACtBX,QAASS,EAAMrD,KACfS,WAAY4C,EAAMrD,KAClBwD,OAAQH,EAAM9D,KAAKC,OACnBiE,YAAaJ,EAAM9D,KAAKC,OACxBkE,OAAQL,EAAMrD,KACd2D,OAAQN,EAAMO,YAAI,IAClBC,eAAgBR,EAAMrD,KACtBiD,KAAMI,EAAMS,YAAG,KACfd,MAAOK,EAAMS,YAAG,KAChBC,aAAcV,EAAMrD,KACpBgE,YAAaX,EAAMrD,KACnBiE,cAAeZ,EAAMrD,KACrBkE,SAAUb,EAAMrD,MAGlB,OAAOmE,YAAOZ,EAAiBH,GA8B1BgB,CAAe5D,EAAM4C,IAD1B,IAEEiB,UAAWvB,EAAgBtC,EAAM4C,GACjCkB,OAAQxC,EAActB,MCtDb+D,EAAb,WAcE,WAAoBnB,GAA6B,yBAA7BA,eAA4B,KAbzChF,KAAOuC,KAAKyC,aAAahF,KAagB,KAZzCoG,MAAgB,EAYyB,KAXzCC,YAWyC,OATxCjE,KAAO,IAAIS,EAAWN,KAAKvC,KAAK2B,eASQ,KARzC2E,WAQyC,OAPxCC,UAA6B,CACnCC,OAAQ,EACRC,IAAK,EACLC,SAAU,EACV7B,KAAM,GAINtC,KAAKoE,YAfT,wDAmBIpE,KAAKqE,YACe,cAAhBrE,KAAK8D,SACP9D,KAAK+D,MAAQvB,EAAYxC,KAAKyC,cAC9BzC,KAAKsE,sBAtBX,kCA2BI,GAAItE,KAAKyC,aAAaqB,OACpB9D,KAAK8D,OAAS9D,KAAKyC,aAAaqB,WAC3B,CACL,IAAMzG,EAAQ2C,KAAKH,KAAKqB,OACxBlB,KAAK8D,OACHzG,EAAQ2C,KAAKyC,aAAa8B,iBACtB,cACAlH,EAAQ2C,KAAKyC,aAAa+B,YAC1B,OACA,cApCZ,yCAyCIxE,KAAKgE,UAAYhE,KAAKyE,qBACtBzE,KAAK6D,MAAQ7D,KAAK0E,eAAe1E,KAAKgE,aA1C1C,2CA8CI,IAAMZ,EAAepD,KAAK+D,MAAML,UAAUrB,MAAMX,QAC1C2B,EAAcrD,KAAK+D,MAAML,UAAUpB,KAAKZ,QACxCuC,EAASjE,KAAK+D,MAAM1B,OAASe,GAAgB,GAC7Cc,EAAMlE,KAAK+D,MAAM1B,OAASe,EAAe,GACzCuB,EAAQ3E,KAAK+D,MAAMb,eAAqC,EAApBlD,KAAK+D,MAAMhB,OAErD,MAAO,CACLkB,OAAQA,EAASU,EAAQ,EACzBT,IAAKA,EAAMS,EAAQ,EACnBR,SAAUnE,KAAK4E,oBACftC,KAAMtC,KAAK+D,MAAMzB,KAAOe,EAAY,EAAIrD,KAAK+D,MAAMR,SAAW,KAxDpE,0CA6DI,IAAMsB,EAAoB7E,KAAK+D,MAAMJ,OAAO7E,OAAS,EAC/CkE,EAAShD,KAAK+D,MAAMf,OAE1B,OAAoB,EADFhD,KAAK+D,MAAML,UAAUtB,QAAQX,UACvBoD,EAAoB7B,EAAU,IAhE1D,qCAmEyBgB,GACrB,OAOI,IAPGpF,KAAKkG,MAKR,KAJDd,EAAUE,IACTF,EAAUC,OACW,EAArBD,EAAUG,SACVH,EAAU1B,MAEVtC,KAAKyC,aAAaoB,SA1E1B,oCA8EuBkB,GACnB,IAAMC,EAAShF,KAAKgE,UAAUe,GAC9B,OAAIC,EAAS,GAAY,OACrBA,EAAS,GAAY,MACrBA,EAAS,GAAY,SACrBA,EAAS,GAAY,OAClB,gBApFX,K,SCgDMnH,EAAa,SAACC,GAAD,OAAyB,SAACmH,GACzC,OAAO,2BACFA,GADL,IAEE1H,OAAQO,EAAcmH,EAAO1H,WAI7BS,EAAc,SAACC,GAAD,OAA0B,SAACgH,GAC7C,OAAO,2BACFA,GADL,IAEEzH,QAASyH,EAAOzH,QAAUS,MAIxBiH,EAAW,SAACC,EAAcC,GAAf,OACf5B,YAAO,eACJ2B,EAAOE,YAASD,MAGfE,EAA4B,CAChC,EAAKtH,EAAY,KACjB,EAAKkH,EAAS,OAAQ,KACtB,EAAKA,EAAS,QAAS,IACvB,EAAKA,EAAS,SAAU,IACxB,EAAKA,EAAS,QAAS,IACvB,EAAKA,EAAS,QAAS,KACvB,EAAKA,EAAS,UAAW,KACzB,EAAK1B,YAAO,CACVX,OAAQwC,YAAS,KACjBvC,YAAauC,YAAS,KACtBxB,MAAOwB,YAAS,OAElB,EAAKH,EAAS,cAAe,GAC7B,EAAKA,EAAS,mBAAoB,GAClC7G,EAAGL,EAAY,SACfuH,EAAG/B,YAAO,CACRX,OAAQwC,YAAS,IACjBvC,YAAauC,YAAS,IACtBxB,MAAOwB,YAAS,MAGlBG,EAAGhC,YAAO,CACRiC,WAAYxC,YAAI,KAElB3E,EAAGT,EAAW,MAEdU,EAAGC,YAAKX,EAAW,MAAOG,EAAY,MAAOwF,YAAO,CAAEX,OAAQwC,YAAS,OAEvEK,EAAGlC,YAAO,CACRK,MAAOwB,YAAS,IAChBhD,MAAOgD,YAAS,KAChBnC,eAAgBD,YAAI,OAcjB,SAASR,EAAahF,EAAcuB,GAWzC,OArBkB,SAACjB,GAA0B,IACrCN,EAAqCM,EAArCN,KAAMF,EAA+BQ,EAA/BR,OAAQC,EAAuBO,EAAvBP,QAASmI,EAAc5H,EAAd4H,UACzBC,EAAgBnI,EAAKoI,WAAWtI,IAAWE,EAAKqI,SAAStI,GAC/D,OAAO,2BACFO,GADL,IAEE+F,OAAQ8B,GAAiBD,EAAY5H,EAAO+F,OAAS,cAgBhDiC,CAViB/G,EACrBC,MAAM,IACNC,KAAI,SAACC,GAAD,OAAOmG,EAA0BnG,EAAEC,gBAAkBC,OAE7BC,QAC7B,SAACvB,EAAQwB,GAAT,OAAuBA,EAAUxB,KAhGZ,SAACN,GAAD,MAAiC,CACxDwE,QAAS,EACT6B,OAAQ,KACR6B,WAAW,EACXpI,OAAQ,GACRC,QAAS,GACTC,KAAMA,EACNgI,WAAY,EACZ3F,WAAY,EACZ+C,OAAQ,GACRC,YAAa,GACbC,OAAQ,GACRC,OAAQ,EACRE,eAAgB,EAChBZ,KAAM,GACND,MAAO,EACPe,aAAc,EACdC,YAAa,EACbC,cAAe,EACfC,SAAU,EACViB,YAAa,IACbD,iBAAkB,KAClBV,MAAO,GA2ELmC,CAAiBvI,K,2IChIRwI,GAAYC,aAAUC,SAAU,WAAW3H,KACpD4H,cAAO,SAACjH,GAAD,MAAuB,UAAXA,EAAEwB,QACrB0F,cAAI,SAAClH,GAAD,OAAOA,EAAEmH,qBAGJC,GAAmB,IAAIC,KACvBC,GAAsB,IAAID,KAC1BE,GAAU,IAAIC,MAAyB,G,UCU9CC,GAAcL,GAAiB/H,KACnCqI,YAAa,KACb3H,cAAI,SAACC,GAAD,OAAOA,EAAE2H,UACbC,gBAGIC,GAAiBP,GAAoBjI,KACzCqI,YAAa,KACb3H,cAAI,SAACC,GAAD,OAAOA,EAAE2H,UACbC,eACAE,aAAU,KAGNC,GAAuBjB,GAAUzH,KACrC2I,aAAeT,IACfN,cAAO,uDACPe,aAAeH,IACf9H,aAAIkI,MACJlI,aAAIH,IAGAsI,GAAQC,YAAMV,GAAaM,IAAsB1I,KAAKuI,eAAwBQ,gBASvEC,GAAgB,CAC3BC,QARcC,YAAc,CAACL,GAAOL,KAAiBxI,KACrDyI,aAAU,CAAClI,EAAc,IAAK,KAC9BG,cAAI,0CAAuBuD,EAAvB,cACJvD,cAAI,SAACC,GAAD,OAAO,IAAIyE,EAAOzE,MACtBwI,aAAY,IAKZf,YAAaS,GACbO,eAAgBZ,GAChBa,UAAW,SAAC1I,GAAD,OAAeoH,GAAiBrF,KAAK/B,IAChD2I,aAAc,SAAC3I,GAAD,OAAesH,GAAoBvF,KAAK/B,K,SCpD3C4I,GAAcC,aAAW,SAACC,GAAD,MAAY,CAChDC,OAAO,aACLC,SAAU,WACVC,aAAcH,EAAMI,MAAMD,aAC1BE,gBAAiBC,aAAKN,EAAMO,QAAQC,OAAOC,MAAO,KAClD,UAAW,CACTJ,gBAAiBC,aAAKN,EAAMO,QAAQC,OAAOC,MAAO,MAEpDC,WAAY,EACZC,MAAO,QACNX,EAAMY,YAAYC,GAAG,MAAQ,CAC5BH,WAAYV,EAAMc,QAAQ,KAG9BC,WAAY,CACVC,QAAShB,EAAMc,QAAQ,EAAG,GAC1BhG,OAAQ,OACRoF,SAAU,WACVe,cAAe,OACfC,QAAS,OACTC,WAAY,SACZC,eAAgB,UAElBC,UAAW,CACThI,MAAO,UACPsH,MAAO,QAETW,WAAY,CACVN,QAAShB,EAAMc,QAAQ,EAAG,EAAG,EAAG,GAEhCS,YAAY,cAAD,OAAgBvB,EAAMc,QAAQ,GAA9B,OACXU,WAAYxB,EAAMyB,YAAYC,OAAO,SACrCf,MAAO,Y,oBC5BI,SAASgB,KACtB,IAAMC,EAAU9B,KADwB,EAEH+B,mBAAS,IAFN,mBAEjC9K,EAFiC,KAEtB+K,EAFsB,KAmBxC,OACE,yBAAKC,UAAWH,EAAQ3B,QACtB,yBAAK8B,UAAWH,EAAQb,YACtB,kBAACiB,GAAA,EAAD,OAEF,kBAACC,GAAA,EAAD,CACEC,YAAY,YACZN,QAAS,CACPO,KAAMP,EAAQP,UACde,MAAOR,EAAQN,YAEjBe,WAAY,CAAE,aAAc,qBAC5BC,SA3BN,SAAuBC,GACrB,IAAM/M,EAAO+M,EAAIC,OAAOpN,OACpB,cAAcqN,KAAKjN,IAAkB,KAATA,KAC9BsM,EAAgBtM,GAChB+J,GAAcM,aAAarK,KAwBzBkN,QApBN,SAAiBH,GACf9D,GAAQxF,MAAK,IAoBT0J,OAjBN,SAAgBJ,GACd9D,GAAQxF,MAAK,IAiBT7D,MAAO2B,K,cClCA,SAAS6L,KACtB,IAAMhB,EAAU9B,KADqB,EAEV+B,mBAAS,IAFC,mBAE9BrM,EAF8B,KAExBqN,EAFwB,KAsBrC,OAlBAC,qBAAU,WACR,IAAMC,EAAMxD,GAAcZ,YAAYqE,UAAUH,GAChD,OAAO,kBAAME,EAAIE,iBAChB,IAgBD,yBAAKlB,UAAWH,EAAQ3B,QACtB,yBAAK8B,UAAWH,EAAQb,YACtB,kBAACmC,GAAA,EAAD,OAEF,kBAACjB,GAAA,EAAD,CACEC,YAAY,SACZN,QAAS,CACPO,KAAMP,EAAQP,UACde,MAAOR,EAAQN,YAEjBe,WAAY,CAAE,aAAc,kBAC5BC,SAzBN,SAAmBC,GACjB,IAAM/M,EAAO+M,EAAIC,OAAOpN,MACxByN,EAAWrN,GACX+J,GAAcK,UAAUpK,IAuBpBkN,QApBN,SAAiBH,GACf9D,GAAQxF,MAAK,IAoBT0J,OAjBN,SAAgBJ,GACd9D,GAAQxF,MAAK,IAiBT7D,MAAOI,KCpCf,IAAM2N,GAAYpD,aAAW,SAACC,GAAD,MAAY,CACvCmC,KAAM,CACJiB,SAAU,GAEZC,MAAO,CACLC,SAAU,OACVC,WAAY,CAAC,QAAS,aAAaC,KAAK,KACxCC,UAAW,OACX9C,MAAO,YAII,SAAS+C,KACtB,IAAM9B,EAAUuB,KAEhB,OACE,kBAAC,IAAMQ,SAAP,KACA,4BAAQ5B,UAAWH,EAAQO,MACzB,kBAACyB,EAAA,EAAD,CAAQ1D,SAAS,UACf,kBAAC2D,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAY/B,UAAWH,EAAQyB,MAAOU,QAAQ,KAAKC,QAAM,GAAzD,iBAGA,kBAACpB,GAAD,MACA,kBAACjB,GAAD,U,ICnBEsC,G,mBAAAA,K,kBAAAA,E,cAAAA,E,YAAAA,E,wBAAAA,Q,KAOL,IAAMC,GAAb,iDACUpI,WADV,mDAGcD,EAAsBC,GAEhC,OADA/D,KAAK+D,MAAQA,EACLD,GACN,IAAK,YACH,MAAO,GACT,IAAK,cACH,MAAO,CAAC9D,KAAKoM,iBACf,QACE,OAAOpM,KAAKqM,gBAXpB,mCAgBI,IAAMC,EAAO,CAACtM,KAAKuM,eAGnB,OAFIvM,KAAK+D,MAAM1B,OAAOiK,EAAK/K,KAAKvB,KAAKwM,aACjCxM,KAAK+D,MAAMzB,MAAMgK,EAAK/K,KAAKvB,KAAKyM,YAC7BH,IAnBX,oCAuBI,IAAIlK,EAAU,IAAIsK,IAAoB1M,KAAK+D,MAAMf,OAAQhD,KAAK+D,MAAMlB,QACpE7C,KAAK2M,gBAAgBvK,GACrBpC,KAAK4M,aAAaxK,GAClB,IAAIyK,EAAW,IAAIC,IAAqB9M,KAAK+D,MAAML,UAAUtB,SAC7DA,EAAQ2K,oBAAqB,EAC7B,IAAIT,EAAO,IAAIU,IAAK5K,EAASyK,GAE7B,OADAP,EAAK7O,KAAOyO,GAASe,QACdX,IA9BX,kCAkCI,IAAItJ,EAAShD,KAAK+D,MAAMf,OAAShD,KAAK+D,MAAMb,eACxCb,EAAQ,IAAIqK,IAAoB1J,EAAQhD,KAAK+D,MAAMjB,aACnD+J,EAAW,IAAIC,IAAqB9M,KAAK+D,MAAML,UAAUrB,OACzDiK,EAAO,IAAIU,IAAK3K,EAAOwK,GAE3B,OADAP,EAAK7O,KAAOyO,GAASgB,MACdZ,IAvCX,iCA2CI,IAAItJ,EAAShD,KAAK+D,MAAMf,OAAShD,KAAK+D,MAAMT,cAAgB,GACxDhB,EAAO,IAAI6K,IAAcnK,EAAQhD,KAAK+D,MAAMR,SAAU,EAAG,IACzDsJ,EAAW,IAAIC,IAAqB9M,KAAK+D,MAAML,UAAUpB,MACzDgK,EAAO,IAAIU,IAAK1K,EAAMuK,GAI1B,OAHAP,EAAKc,SAAShN,GAAK,GACnBkM,EAAKc,SAASjO,GAAK,IACnBmN,EAAK7O,KAAOyO,GAASmB,KACdf,IAlDX,sCAsDI,IAAIgB,EAAW,IAAIC,IAAwB,EAAG,GAAK,IAAK,GAAI,EAAG,GAC3DV,EAAW,IAAIC,IAAqB9M,KAAK+D,MAAML,UAAUnB,WACzD+J,EAAO,IAAIU,IAAKM,EAAUT,GAE9B,OADAP,EAAK7O,KAAOyO,GAASsB,UACdlB,IA1DX,iCA6DqBgB,EAA+BG,GAChD,IAAMC,EAAQ,SAACjQ,GAAD,OAAkB6P,EAASK,SAASF,EAAKhQ,IAAOqB,UAC9D,OAAQ4O,EAAM,KAAOA,EAAM,KAAOA,EAAM,MAAQ,IA/DpD,sCAkE0BtL,GAA+B,IAAD,OAChDrC,EAAQ,IAAIH,EAAMI,KAAK+D,MAAMtG,KAAK2B,cAAeY,KAAK+D,MAAMjE,YAChEsC,EAAQuL,SAASC,SAAQ,SAACC,GACxB,IAAIpP,EAASsB,EAAM+N,IAAID,GACvBA,EAAOE,UAAU,EAAKC,UAAUvP,SAtEtC,gCA0EoBpB,GAChB,OAAuB,GAAfA,EAAQ,IAAW2C,KAAK+D,MAAMhB,OAAS/C,KAAK+D,MAAMf,SA3E9D,qCA8EyB3F,GACrB,OAAQA,EAAQ2C,KAAK+D,MAAMf,QAAU,EAAIhD,KAAK+D,MAAMhB,OAAS,KA/EjE,mCAkFuBX,GAA+B,IAAD,wBAC9BA,EAAQ6L,OADsB,yBACtCR,EADsC,QAEzC3O,EAAS,EAAKoP,WAAW9L,EAASqL,GAClCU,EAAiB,EAAKC,eAAetP,GAKrCwC,EAJY,EAAKyC,MAAMJ,OAAO0K,MAClC,SAAC/M,GAAD,OAAWA,EAAMD,QAAU8M,KAGL7M,MACxBmM,EAAKnM,MAAQA,GARf,2BAAmC,IADc,mCAlFrD,K,oGCVMgN,GAAc,CAACC,KAAIC,KAAIC,KAAIC,KAAIC,MAuExBC,GAAc,IArE3B,iDACIC,MAAO,EADX,KAEIC,MAAQ,IAAIC,IAFhB,KAGIC,SAAW,IAAIC,IAHnB,KAIIC,OAAS,IAAIC,IAAkB,GAAI,EAAG,GAAK,KAJ/C,KAKI7C,KAAe,GALnB,KAMI8C,mBANJ,OAOIC,aAAe,IAAIlD,GAPvB,KAQImD,qBARJ,0DAUgBC,GACRvP,KAAK6O,MAAO,EACZ7O,KAAKwP,cAAc,GACnBxP,KAAKkP,OAAO/G,SAAS9H,EAAI,EACzBL,KAAKgP,SAASS,QAAQC,OAAOC,WAAYD,OAAOE,aAChDL,EAAMM,YAAY7P,KAAKgP,SAASc,YAChC,IAAIC,EAAQ,IAAIC,IAAiB,SAAU,KAC3CD,EAAM5H,SAAS2F,IAAI,EAAG,EAAG,GAAGmC,YAC5BjQ,KAAK8O,MAAM7L,IAAI8M,GAEf/P,KAAKkQ,YApBb,oCAuBkBC,GACZ,IAAIC,EAAQ9B,GAAY6B,EAAM7B,GAAYxP,QAC1C,GAAGsR,IAAUpQ,KAAKsP,gBAAiB,CACjC,IAAIe,GAAU,IAAIC,KAAgBC,KAAKH,GACvCpQ,KAAK8O,MAAMrJ,WAAa4K,EACxBrQ,KAAKsP,gBAAkBc,KA5B/B,gCAgCcnL,GAAiB,IAAD,OAExB,GADAjF,KAAKwQ,mBACgB,cAAlBvL,EAAOnB,OAAwB,CAChC9D,KAAKwP,cAAcvK,EAAOlB,MAAM0B,YAChCzF,KAAKsM,KAAOtM,KAAKqP,aAAa/C,KAAKrH,EAAOnB,OAAQmB,EAAOlB,OACzD/D,KAAKsM,KAAKsB,SAAQ,SAAAtB,GAAI,OAAI,EAAKwC,MAAM7L,IAAIqJ,MAEzC,IAAMmE,EAAcf,OAAOC,WACrBe,EAAKD,EACLE,EAAK/R,KAAKgS,IAAKH,EAAY,EAAG,GAAIf,OAAOE,YAAY,IACrDhH,EAAQ6H,GAAe,IAAME,EAAKD,EAExC1Q,KAAKgP,SAASc,WAAW/L,MAAM6E,MAA/B,UAA0CA,EAA1C,MACA5I,KAAKgP,SAASc,WAAW/L,MAAMhB,OAA/B,UAA2C6F,EAA3C,SA7CR,yCAiDwB,IAAD,OACjB5I,KAAKsM,KAAKsB,SAAQ,SAAAtB,GAAI,OAAI,EAAKwC,MAAM+B,OAAOvE,QAlDlD,gCAqDe,IAAD,OACF4D,EAAU,SAAVA,IACJY,sBAAsBZ,GAEtB,EAAK5D,KAAKsB,SAAQ,SAAAtB,GACbA,EAAK7O,OAASyO,GAASe,SAAWX,EAAK7O,OAASyO,GAASgB,QAAOZ,EAAKc,SAAShN,GAAK,MACnFkM,EAAK7O,OAASyO,GAASmB,MAAQf,EAAK7O,OAASyO,GAASsB,YAAWlB,EAAKc,SAAS/M,GAAK,SAGzF,EAAK2O,SAAS+B,OAAO,EAAKjC,MAAO,EAAKI,SAGxCgB,QAjEN,MCTac,GAAgB,SAAIC,GAA+B,IAAD,EACjCnH,qBADiC,mBACpDoH,EADoD,KAC7CC,EAD6C,KAQ3D,OALApG,qBAAU,WACR,IAAMC,EAAMiG,EAAWhG,UAAUkG,GACjC,OAAO,kBAAMnG,EAAIE,iBAChB,CAAC+F,IAEGC,GCLL9F,GAAYpD,aAAW,SAACC,GAAD,MAAY,CACvCmJ,QAAS,CACPC,SAAU,SACVlJ,SAAU,YAEZmJ,OAAQ,CACNnJ,SAAU,WACVoD,SAAU,OACVgG,cAAe,YACfjJ,gBAAiB,MACjBhH,MAAO,QACP/B,UAAW,iBACX0J,QAAS,aACTuI,IAAK,OACLC,KAAM,SACN7I,MAAO,QACP8C,UAAW,SACXF,WAAY,CAAC,QAAS,aAAaC,KAAK,UAI7B,SAASiG,KACtB,IAAM7H,EAAUuB,KACVmE,EAAQoC,iBAAO,MACf1M,EAAS+L,GAAcxJ,GAAcC,SAU3C,OARI8H,EAAMqC,UAAYhD,GAAYC,MAChCD,GAAYiD,YAAYtC,EAAMqC,SAG5B3M,GACF2J,GAAYkD,UAAU7M,GAItB,yBAAK+E,UAAWH,EAAQuH,SACtB,yBAAKpH,UAAWH,EAAQyH,QAAxB,OAAiCrM,QAAjC,IAAiCA,OAAjC,EAAiCA,EAAQnB,QACzC,yBAAKiO,IAAKxC,KCrChB,IAAMnE,GAAYpD,aAAW,SAACC,GAAD,MAAY,CACrC+J,QAAS,CACL/I,QAAS,OACTgJ,cAAe,OAEnB3G,MAAO,CACHC,SAAU,QAEdvH,UAAW,CACPkO,UAAW,OACX3G,SAAU,QAEdxG,SAAU,CACNwM,cAAe,aACfY,WAAY,YAeL,SAASC,KACpB,IAAMvI,EAAUuB,KACVnG,EAAS+L,GAAcxJ,GAAcC,SACrC4K,EAA+B,eAAb,OAANpN,QAAM,IAANA,OAAA,EAAAA,EAAQnB,SAA6C,iBAAb,OAANmB,QAAM,IAANA,OAAA,EAAAA,EAAQnB,QACtDD,EAAQwO,EAAY,KAAO,wBAAIrI,UAAWH,EAAQyB,OAAvB,WAAgCrG,QAAhC,IAAgCA,OAAhC,EAAgCA,EAAQpB,MAAMyO,kBAGzEtO,EAAYqO,EAAY,KAC1B,wBAAIrI,UAAWH,EAAQ7F,WAHuC,CAAC,WAAY,SAAU,MAAO,QAIzE9E,KAAI,SAACqT,EAAKpC,GAAN,OACf,wBAAIqC,IAAKrC,EAAOnG,UAAWH,EAAQ9E,UAAWwN,EAA9C,YAAqDtN,QAArD,IAAqDA,OAArD,EAAqDA,EAAQwN,cAAcF,QAKvF,OACI,yBAAKvI,UAAWH,EAAQmI,SACpB,wBAAIhI,UAAWH,EAAQyB,OAAvB,OAA+BrG,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAQxH,MACtCoG,EACD,4BA9BW,SAACC,EAAsBrG,GAC1C,OAAOqG,GACH,IAAK,YACD,MAAM,mBAAN,OAA0BrG,EAA1B,mBACJ,IAAK,cACD,MAAM,GAAN,OAAUA,EAAV,oFACJ,QACI,MAAM,GAAN,OAAUqG,IAuBL4O,CAAc,OAACzN,QAAD,IAACA,OAAD,EAACA,EAAQnB,OAAT,OAAiBmB,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAQxH,OAC3CuG,GCjDb,IAAMoH,GAAYpD,aAAW,SAACC,GAAD,MAAY,CACvChD,OAAO,aACLkE,QAAS,OACTwJ,oBAAqB,UACrBC,iBAAkB,aACjB3K,EAAMY,YAAYgK,KAAK,MAAQ,CAC9B1J,QAAS,OACT2J,cAAe,WAGnBC,gBAAiB,CACfzK,gBAAiB,OACjBW,QAAS,OACTyC,UAAW,SACXsH,gBAAiB,EACjBC,cAAe,OAqBJC,OAjBf,WACE,IAAMrJ,EAAUuB,KAEhB,OACE,6BACE,kBAACO,GAAD,MACA,yBAAK3B,UAAWH,EAAQ5E,QACtB,kBAACyM,GAAD,MACA,kBAACU,GAAD,MACA,2BAAOpI,UAAWH,EAAQkJ,iBAA1B,4ECtBYI,QACW,cAA7BzD,OAAO0D,SAASC,UAEe,UAA7B3D,OAAO0D,SAASC,UAEhB3D,OAAO0D,SAASC,SAASC,MACvB,2DCZNC,IAASxC,OACP,kBAAC,IAAMyC,WAAP,KACE,kBAAC,GAAD,OAEFrN,SAASsN,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7493a63f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg_0.710cfcbb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg_1.52bbd2e3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg_2.b03cbffa.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg_3.83d9eaaa.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg_4.7faada7a.jpg\";","import { pipe, identity } from \"ramda\";\n\nconst FOC = [\n  \"Murry\",\n  \"Jemaine\",\n  \"Bret\",\n  \"Dave\",\n  \"Eugene\",\n  \"Jim\",\n  \"Mel\",\n  \"Greg\",\n];\nconst SW = [\n  \"Darth Vader\",\n  \"Leia\",\n  \"Rey\",\n  \"Luke Skywalker\",\n  \"Obi-Wan Kenobi\",\n  \"Yoda\",\n  \"Chewbacca\",\n  \"Han Solo\",\n  \"RD-D2\",\n  \"C3P0\",\n  \"Jar Jar Binks\",\n];\nconst RM = [\"Rick\", \"Morty\", \"Summer\", \"Beth\", \"Jerry\", \"Sqanchy\", \"Jessica\"];\n\nexport const namingCombinations = {\n    prefix: [\"\", \"Planet \", \"Quadrant \"],\n    postfix: [\"\", \" World\", \" Land\"],\n    name: [...FOC, ...SW, ...RM]\n}\n\ntype NameConfig = { prefix: string; postfix: string; exclude: Set<string> };\n\nconst baseNameConfig = {\n  prefix: \"\",\n  postfix: \"\",\n  exclude: new Set(),\n};\n\nconst prefixName = (prefixValue: string) => (config: NameConfig) => ({\n  ...config,\n  prefix: prefixValue + config.prefix,\n});\n\nconst postfixName = (postfixValue: string) => (config: NameConfig) => ({\n  ...config,\n  postfix: config.postfix + postfixValue,\n});\n\nconst exclude = (value: string) => (config: NameConfig) => ({\n  ...config,\n  exclude: new Set([...Array.from(config.exclude), value]),\n});\n\nconst DIMENSION_NAMING = {\n  \"0\": postfixName(\"!\"),\n  \"7\": exclude(\"Earth\"),\n  A: postfixName(\" Land\"),\n  D: prefixName(\"Sm\"),\n  // everythings in a box\n  E: pipe(prefixName(\"[ \"), postfixName(\" ]\")),\n};\n\nexport const dimensionConfig = (name: string) : NameConfig => {\n  const namingConvenions = name.split(\"\").map((x) => DIMENSION_NAMING[x.toUpperCase()] || identity);\n\n  return namingConvenions.reduce(\n    (config, transform) => transform(config),\n    baseNameConfig\n  );\n};\n","import { isEmpty } from \"ramda\";\nimport { dimensionConfig, namingCombinations } from \"./config\";\n\n\nfunction getName(exclude: Set<string>) {\n    const name = random(\"name\");\n    return exclude.has(name) ? getName(exclude) : name;\n}\n\nfunction random(type: \"prefix\" | \"postfix\" | \"name\"){\n    const list = namingCombinations[type];\n    const index = Math.floor(Math.random()*list.length);\n    return list[index];\n}\n\nexport function nameGenerator(dimension: string){\n    const config = dimensionConfig(dimension)\n    const prefix = isEmpty(config.prefix) ? random(\"prefix\") : config.prefix\n    const postfix = isEmpty(config.postfix) ? random(\"postfix\") : config.postfix\n    const name = getName(config.exclude)\n    return prefix + name + postfix;\n}","import SimplexNoise from 'simplex-noise';\nimport { Vector3 } from \"three\";\n\nexport class Noise {\n  noise: SimplexNoise;\n  noiseScale: number;\n  constructor(seed: string, noiseScale: number) {\n    this.noise = new SimplexNoise(seed);\n    this.noiseScale = noiseScale;\n  }\n\n  set(vector: Vector3) {\n    return (\n      this.noise.noise3D(\n        vector.x * this.noiseScale,\n        vector.y * this.noiseScale,\n        vector.z * this.noiseScale\n      ) /\n        2 +\n      0.5\n    );\n  }\n}\n","export class NumberSeed {\n    constructor(private value: string){}\n\n    next(){\n        let sum = 0;\n    \n        // convert seed to base64 help randomise chars\n        // min max of chars in the unicode chars that use b64 chars\n        const b64 = btoa(this.value),\n            min = 32,\n            max = 90,\n            normalize = (val: number) => (val - min) / (max - min);\n    \n        // sum normalized numbers together\n        for(let i = 0; i < b64.length; i++){\n            let code = b64.charCodeAt(i);\n            let normalised = code >= max ? 0.99999 : code <= min ? 0.00001 : normalize(code)\n            sum += normalised;\n        }\n    \n        // mod by one to give whatever is left over which will give a random num between 0 and 0.9999999999999\n        // Will never return 1\n        const dec = sum%1;\n        const decAsString = dec.toString();\n        this.value += decAsString[decAsString.length-1];\n        return dec;\n    }\n}\n\n\n// Same Function using a generator\nexport function* seedGenerator(value: string) {    \n    const b64 = btoa(value),\n        min = 32,\n        max = 90,\n        normalize = (val: number) => (val - min) / (max - min);\n\n    let sum = 0;\n    for(let i = 0; i < b64.length; i++){\n        let code = b64.charCodeAt(i);\n        let normalised = code >= max ? 0.99999 : code <= min ? 0.00001 : normalize(code)\n        sum += normalised;\n    }\n\n    const dec = sum%1;\n    yield dec;\n    const decAsString = dec.toString();\n    yield* seedGenerator(value + decAsString[decAsString.length-1]);\n}","import { PlanetConfig } from './config';\nimport { MeshStandardMaterialParameters } from \"three\";\n\nimport { Color } from \"three\";\nimport { NumberSeed } from \"../../util\";\n\nfunction rgbFactory(seed: NumberSeed): Color {\n  return new Color(seed.next() * 0xffffff);\n}\n\nexport type TerrainColors = { offset: number, color: Color }[]\n\nexport function terrainColors(seed: NumberSeed, avgColors = 2): TerrainColors {\n  let offset = 0;\n\n  const terrainColors = [];\n\n  while (offset < 1) {\n    offset += seed.next() / avgColors;\n\n    let color = rgbFactory(seed);\n\n    terrainColors.push({\n      offset: offset > 1 ? 1 : offset,\n      color,\n    });\n  }\n\n  return terrainColors;\n}\n\nfunction waterMaterial(seed: NumberSeed): MeshStandardMaterialParameters {\n  return {\n    metalness: seed.next() * 0.4,\n    opacity: (seed.next()/2) + 0.3,\n    roughness: seed.next() * 1,\n    flatShading: true,\n    transparent: true,\n    color: rgbFactory(seed),\n  };\n}\n\nfunction ringMaterial(seed: NumberSeed): MeshStandardMaterialParameters {\n  return {\n    opacity: seed.next(),\n    roughness: seed.next() * 2,\n    flatShading: true,\n    transparent: true,\n    color: rgbFactory(seed),\n  };\n}\n\nfunction blackHoleMaterial(seed: NumberSeed): MeshStandardMaterialParameters {\n  return {\n    metalness: seed.next(),\n    opacity: 0.9,\n    roughness: seed.next() * 2,\n    flatShading: true,\n    transparent: true,\n    color: new Color(0x333333),\n  };\n}\n\n\nfunction terrainMaterial(seed: NumberSeed, metalic: number): MeshStandardMaterialParameters {\n  return {\n    metalness: metalic * 0.5,\n    roughness: seed.next() * 1,\n    flatShading: true,\n    color: rgbFactory(seed),\n    vertexColors: true,\n  };\n}\n\n\n\n\nexport type PlanetMaterialConfig = {\n    terrain: MeshStandardMaterialParameters,\n    water: MeshStandardMaterialParameters,\n    ring: MeshStandardMaterialParameters,\n    blackhole: MeshStandardMaterialParameters,\n}\n\nexport function planetMaterials(seed: NumberSeed, {metalic}: PlanetConfig): PlanetMaterialConfig {\n    return {\n        terrain: terrainMaterial(seed, metalic),\n        water: waterMaterial(seed),\n        ring: ringMaterial(seed),\n        blackhole: blackHoleMaterial(seed),\n    }\n}","import { PlanetConfig, PlanetStatus } from \"./config\";\nimport {\n  planetMaterials,\n  terrainColors,\n  TerrainColors,\n  PlanetMaterialConfig,\n} from \"./materials\";\nimport { NumberSeed } from \"./../../util/random\";\nimport { evolve, identity, add, lt } from \"ramda\";\n\nexport const multiplyConfig = (\n  seed: NumberSeed,\n  planetConfig: PlanetConfig\n) => {\n  const xSeed = (transformation) => (value) =>\n    transformation(seed.next() * value);\n\n  const transformations = {\n    metalic: xSeed(identity),\n    noiseScale: xSeed(identity),\n    detail: xSeed(Math.floor),\n    waterDetail: xSeed(Math.floor),\n    height: xSeed(identity),\n    radius: xSeed(add(1)),\n    waterRadiusDif: xSeed(identity),\n    ring: xSeed(lt(0.5)),\n    water: xSeed(lt(0.5)),\n    waterOpacity: xSeed(identity),\n    ringOpacity: xSeed(identity),\n    ringRadiusDif: xSeed(identity),\n    ringSize: xSeed(identity),\n  };\n\n  return evolve(transformations, planetConfig);\n};\n\nexport type PlanetStyle = {\n  background: number;\n  colors: TerrainColors;\n  detail: number;\n  height: number;\n  materials: PlanetMaterialConfig;\n  name: string;\n  noiseScale: number;\n  price: number;\n  radius: number;\n  ring: boolean;\n  ringOpacity: number;\n  ringSize: number;\n  ringRadiusDif: number;\n  soldPercent: number;\n  status: PlanetStatus;\n  supernovaPercent: number;\n  validName: boolean;\n  water: boolean;\n  waterDetail: number;\n  waterOpacity: number;\n  waterRadiusDif: number;\n};\n\nexport const planetStyle = (planetConfig: PlanetConfig) : PlanetStyle => {\n  const seed = new NumberSeed(planetConfig.name.toUpperCase());\n  return {\n    ...multiplyConfig(seed, planetConfig),\n    materials: planetMaterials(seed, planetConfig),\n    colors: terrainColors(seed),\n  };\n};\n","import { PlanetConfig, PlanetStatus } from \"./config\";\nimport { NumberSeed } from \"./../../util\";\nimport { planetStyle, PlanetStyle } from \"./style\";\n\ntype PlanetResources = {\n  liquid: number;\n  gas: number;\n  minerals: number;\n  ring: number;\n};\n\nexport class Planet {\n  public name = this.planetConfig.name;\n  public price: number = 0;\n  public status: PlanetStatus;\n\n  private seed = new NumberSeed(this.name.toUpperCase());\n  public style: PlanetStyle;\n  private resources: PlanetResources = {\n    liquid: 0,\n    gas: 0,\n    minerals: 0,\n    ring: 0,\n  };\n\n  constructor(private planetConfig: PlanetConfig) {\n    this.calculate();\n  }\n\n  private calculate() {\n    this.setStatus();\n    if (this.status !== \"Not Found\") {\n      this.style = planetStyle(this.planetConfig);\n      this.calculateDetails();\n    }\n  }\n\n  private setStatus() {\n    if (this.planetConfig.status) {\n      this.status = this.planetConfig.status;\n    } else {\n      const value = this.seed.next();\n      this.status =\n        value < this.planetConfig.supernovaPercent\n          ? \"Supernova'd\"\n          : value < this.planetConfig.soldPercent\n          ? \"Sold\"\n          : \"For Sale\";\n    }\n  }\n\n  private calculateDetails() {\n    this.resources = this.calculateResources();\n    this.price = this.calculatePrice(this.resources);\n  }\n\n  private calculateResources(): PlanetResources {\n    const waterOpacity = this.style.materials.water.opacity;\n    const ringOpacity = this.style.materials.ring.opacity;\n    const liquid = this.style.water && waterOpacity >= 0.5;\n    const gas = this.style.water && waterOpacity < 0.5;\n    const level = this.style.waterRadiusDif + this.style.height * 2;\n\n    return {\n      liquid: liquid ? level : 0,\n      gas: gas ? level : 0,\n      minerals: this.calculateMinerals(),\n      ring: this.style.ring ? ringOpacity/2 * this.style.ringSize : 0,\n    };\n  }\n\n  private calculateMinerals() {\n    const amountOfMaterials = this.style.colors.length / 8;\n    const radius = this.style.radius;\n    const metalness = this.style.materials.terrain.metalness;\n    return (metalness * 3 * amountOfMaterials * radius) / 2;\n  }\n\n  private calculatePrice(resources: PlanetResources) {\n    return Math.round(\n      (resources.gas +\n        resources.liquid +\n        resources.minerals * 5 +\n        resources.ring) *\n        100 *\n        this.planetConfig.price\n    ) * 10000;\n  }\n\n  public resourceLevel(resource: \"liquid\" | \"gas\" | \"minerals\" | \"ring\") {\n    const amount = this.resources[resource];\n    if (amount < 0.2) return \"None\";\n    if (amount < 0.4) return \"Low\";\n    if (amount < 0.6) return \"Medium\";\n    if (amount < 0.8) return \"High\";\n    return \"Very High\";\n  }\n}\n","import { add, multiply, pipe, evolve, identity } from \"ramda\";\n\nexport type PlanetStatus =\n  | \"For Sale\"\n  | \"Sold\"\n  | \"Supernova'd\"\n  | \"Not Found\"\n  | null;\n\nexport type PlanetConfig = {\n  metalic: number;\n  status: PlanetStatus;\n  validName: boolean;\n  prefix: string;\n  postfix: string;\n  name: string; // name of planet\n  background: number; // background to scene\n  noiseScale: number; // max amount of noise\n  detail: number; // max detail\n  waterDetail: number; // max detail\n  height: number; // max terrain height\n  radius: number; // max radius - 1\n  waterRadiusDif: number; // difference from radius\n  ring: number; // percent chance of ring\n  water: number; // percent chance of water\n  waterOpacity: number; // water opacity multiplier\n  ringOpacity: number; // ring opacity multiplier\n  ringRadiusDif: number;\n  ringSize: number;\n  soldPercent: number; // percent chance of being sold\n  supernovaPercent: number; // percent chance of supernova\n  price: number; // price multiplier\n};\n\nconst basePlanetConfig = (name: string): PlanetConfig => ({\n  metalic: 1,\n  status: null,\n  validName: true,\n  prefix: \"\",\n  postfix: \"\",\n  name: name,\n  background: 0,\n  noiseScale: 2,\n  detail: 30,\n  waterDetail: 30,\n  height: 0.5,\n  radius: 2,\n  waterRadiusDif: 0,\n  ring: 0.7,\n  water: 1,\n  waterOpacity: 1,\n  ringOpacity: 1,\n  ringRadiusDif: 1,\n  ringSize: 1,\n  soldPercent: 0.25,\n  supernovaPercent: 0.025,\n  price: 1,\n});\n\nconst prefixName = (prefixValue: string) => (planet: PlanetConfig) => {\n    return {\n      ...planet,\n      prefix: prefixValue + planet.prefix\n    };\n};\n\nconst postfixName = (postfixValue: string) => (planet: PlanetConfig) => {\n  return {\n    ...planet,\n    postfix: planet.postfix + postfixValue,\n  };\n};\n\nconst multiper = (prop: string, multipier: number) =>\n  evolve({\n    [prop]: multiply(multipier),\n  });\n\nconst DIMENSION_TRANSFORMATIONS = {\n  \"0\": postfixName(\"!\"),\n  \"1\": multiper(\"ring\", 1.2),\n  \"2\": multiper(\"water\", 0.7),\n  \"3\": multiper(\"radius\", 0.7),\n  \"4\": multiper(\"price\", 0.7),\n  \"5\": multiper(\"price\", 1.4),\n  \"6\": multiper(\"metalic\", 1.2),\n  \"7\": evolve({\n    detail: multiply(1.3),\n    waterDetail: multiply(1.3),\n    price: multiply(1.1),\n  }),\n  \"8\": multiper(\"soldPercent\", 3),\n  \"9\": multiper(\"supernovaPercent\", 5),\n  A: postfixName(\" Land\"),\n  B: evolve({\n    detail: multiply(0.8),\n    waterDetail: multiply(0.8),\n    price: multiply(0.8),\n  }),\n  // update background to cats\n  C: evolve({\n    background: add(1),\n  }),\n  D: prefixName(\"Sm\"),\n  // everythings in a box\n  E: pipe(prefixName(\"[ \"), postfixName(\" ]\"), evolve({ detail: multiply(0.5) })),\n  // fart dimension lower price greater gas radius and chance of gas\n  F: evolve({\n    price: multiply(0.9),\n    water: multiply(1.1),\n    waterRadiusDif: add(0.2),\n  }),\n};\n\nconst validNaming = (config: PlanetConfig) => {\n  const { name, prefix, postfix, validName } = config;\n  const correctNaming = name.startsWith(prefix) && name.endsWith(postfix);\n  return {\n    ...config,\n    status: correctNaming && validName ? config.status : \"Not Found\"\n  }\n\n}\n\nexport function planetConfig(name: string, dimension: string): PlanetConfig {\n  const transformations = dimension\n    .split(\"\")\n    .map((x) => DIMENSION_TRANSFORMATIONS[x.toUpperCase()] || identity);\n\n  const config = transformations.reduce(\n    (config, transform) => transform(config),\n    basePlanetConfig(name)\n  );\n\n  // reset name for easy use\n  return validNaming(config)\n}\n\n","import { Subject, fromEvent, BehaviorSubject } from 'rxjs';\nimport { filter, tap } from 'rxjs/operators';\n\nexport const spaceBar$ = fromEvent(document, 'keydown').pipe(\n    filter((x: any) => x.code === \"Space\"),\n    tap((x) => x.preventDefault())\n)\n\nexport const planetNameInput$ = new Subject<string>()\nexport const dimensionNameInput$ = new Subject<string>()\nexport const typing$ = new BehaviorSubject<boolean>(false)","import { Planet, nameGenerator, planetConfig } from \"./../generators\";\nimport { combineLatest, merge } from \"rxjs\";\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  filter,\n  map,\n  share,\n  startWith,\n  withLatestFrom,\n  shareReplay\n} from \"rxjs/operators\";\nimport {\n  planetNameInput$,\n  typing$,\n  dimensionNameInput$,\n  spaceBar$,\n} from \"./userInputs\";\nimport { last } from \"ramda\";\n\nconst planetName$ = planetNameInput$.pipe(\n  debounceTime(500),\n  map((x) => x.trim()),\n  distinctUntilChanged(),\n);\n\nconst dimensionName$ = dimensionNameInput$.pipe(\n  debounceTime(500),\n  map((x) => x.trim()),\n  distinctUntilChanged(),\n  startWith(\"\")\n);\n\nconst planetFromGenerator$ = spaceBar$.pipe(\n  withLatestFrom(typing$),\n  filter(([_, typing]) => !typing),\n  withLatestFrom(dimensionName$),\n  map(last),\n  map(nameGenerator)\n);\n\nconst name$ = merge(planetName$, planetFromGenerator$).pipe(distinctUntilChanged(), share());\n\nconst planet$ = combineLatest([name$, dimensionName$]).pipe(\n  startWith([nameGenerator(\"\"), \"\"]),\n  map(([name, dimension]) => planetConfig(name, dimension)),\n  map((x) => new Planet(x)),\n  shareReplay(1),\n);\n\nexport const planetService = {\n  planet$: planet$,\n  planetName$: name$,\n  demensionName$: dimensionName$,\n  setPlanet: (x: string) => planetNameInput$.next(x),\n  setDimension: (x: string) => dimensionNameInput$.next(x),\n};\n","import { makeStyles } from \"@material-ui/core\";\nimport { fade } from \"@material-ui/core\";\n\nexport const InputStyles = makeStyles((theme) => ({\n  search: {\n    position: \"relative\",\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    \"&:hover\": {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    marginLeft: 0,\n    width: \"100%\",\n    [theme.breakpoints.up(\"sm\")]: {\n      marginLeft: theme.spacing(1),\n    },\n  },\n  searchIcon: {\n    padding: theme.spacing(0, 2),\n    height: \"100%\",\n    position: \"absolute\",\n    pointerEvents: \"none\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  inputRoot: {\n    color: \"inherit\",\n    width: \"100%\",\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 0),\n    // vertical padding + font size from searchIcon\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n    transition: theme.transitions.create(\"width\"),\n    width: \"100%\",\n  },\n}));\n","import React, { useState } from \"react\";\nimport { planetService } from \"src/services/planetService\";\nimport { InputStyles } from \"./searchStyles\";\nimport { typing$ } from \"./../../services/userInputs\";\nimport { InputBase } from \"@material-ui/core\";\nimport { Fingerprint } from \"@material-ui/icons\";\n\nexport default function DimensionSearch() {\n  const classes = InputStyles();\n  const [dimension, updateDimension] = useState(\"\");\n\n  function dimensionName(evt: any) {\n    const name = evt.target.value;\n    if (/^[0-9a-f]+$/.test(name) || name === \"\") {\n      updateDimension(name);\n      planetService.setDimension(name);\n    }\n  }\n\n  function focused(evt: any) {\n    typing$.next(true);\n  }\n\n  function blured(evt: any) {\n    typing$.next(false);\n  }\n  return (\n    <div className={classes.search}>\n      <div className={classes.searchIcon}>\n        <Fingerprint />\n      </div>\n      <InputBase\n        placeholder=\"Dimension\"\n        classes={{\n          root: classes.inputRoot,\n          input: classes.inputInput,\n        }}\n        inputProps={{ \"aria-label\": \"Search Dimensions\" }}\n        onChange={dimensionName}\n        onFocus={focused}\n        onBlur={blured}\n        value={dimension}\n      />\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { planetService } from \"src/services/planetService\";\nimport { typing$ } from \"./../../services/userInputs\";\nimport { Public } from \"@material-ui/icons\";\nimport { InputBase } from \"@material-ui/core\";\nimport { InputStyles } from \"./searchStyles\"\n\nexport default function PlanetSearch() {\n  const classes = InputStyles();\n  const [name, updateName] = useState(\"\");\n\n  useEffect(() => {\n    const sub = planetService.planetName$.subscribe(updateName);\n    return () => sub.unsubscribe();\n  }, []);\n\n  function setPlanet(evt: any) {\n    const name = evt.target.value;\n    updateName(name);\n    planetService.setPlanet(name);\n  }\n\n  function focused(evt: any) {\n    typing$.next(true);\n  }\n\n  function blured(evt: any) {\n    typing$.next(false);\n  }\n  return (\n    <div className={classes.search}>\n      <div className={classes.searchIcon}>\n        <Public />\n      </div>\n      <InputBase\n        placeholder=\"Planet\"\n        classes={{\n          root: classes.inputRoot,\n          input: classes.inputInput,\n        }}\n        inputProps={{ \"aria-label\": \"Search Planets\" }}\n        onChange={setPlanet}\n        onFocus={focused}\n        onBlur={blured}\n        value={name}\n      />\n    </div>\n  );\n}\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport DimensionSearch from './DimensionSearch';\nimport PlanetSearch from './PlanetSearch';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  title: {\n    fontSize: \"30px\",\n    fontFamily: [\"Anton\", \"san-serif\"].join(\",\"),\n    textAlign: 'left',\n    width: '100%',\n  }\n}));\n\nexport default function AppToolBar() {\n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n    <header className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography className={classes.title} variant=\"h6\" noWrap>\n            Ray Lightyear\n          </Typography>\n          <PlanetSearch></PlanetSearch>\n          <DimensionSearch></DimensionSearch>\n        </Toolbar>\n      </AppBar>\n    </header>\n    </React.Fragment>\n  );\n}","import { PlanetStyle } from './../generators/planet/style';\nimport { Noise } from \"./../util/noise\";\nimport { PlanetStatus } from \"../generators/planet/config\";\n\nimport {\n  Face3,\n  IcosahedronGeometry,\n  Mesh,\n  TorusGeometry,\n  MeshStandardMaterial,\n  TorusKnotBufferGeometry,\n} from \"three\";\n\nexport enum MeshName {\n  TERRAIN = \"terrain\",\n  WATER = \"water\",\n  RING = \"ring\",\n  BLACKHOLE = \"black hole\",\n}\n\nexport class MeshRenderer {\n  private style: PlanetStyle;\n\n  public mesh(status: PlanetStatus, style: PlanetStyle) {\n    this.style = style;\n    switch (status) {\n      case \"Not Found\":\n        return [];\n      case \"Supernova'd\":\n        return [this.blackHoleMesh()];\n      default:\n        return this.planetMesh();\n    }\n  }\n\n  private planetMesh() {\n    const mesh = [this.terrainMesh()];\n    if (this.style.water) mesh.push(this.waterMesh());\n    if (this.style.ring) mesh.push(this.ringMesh());\n    return mesh;\n  }\n\n  private terrainMesh(): Mesh {\n    let terrain = new IcosahedronGeometry(this.style.radius, this.style.detail);\n    this.generateTerrain(terrain);\n    this.paintTerrain(terrain);\n    let material = new MeshStandardMaterial(this.style.materials.terrain);\n    terrain.elementsNeedUpdate = true;\n    let mesh = new Mesh(terrain, material);\n    mesh.name = MeshName.TERRAIN;\n    return mesh;\n  }\n\n  private waterMesh(): Mesh {\n    let radius = this.style.radius + this.style.waterRadiusDif;\n    let water = new IcosahedronGeometry(radius, this.style.waterDetail);\n    let material = new MeshStandardMaterial(this.style.materials.water);\n    let mesh = new Mesh(water, material);\n    mesh.name = MeshName.WATER;\n    return mesh;\n  }\n\n  private ringMesh(): Mesh {\n    let radius = this.style.radius + this.style.ringRadiusDif + 0.5\n    let ring = new TorusGeometry(radius, this.style.ringSize, 3, 15);\n    let material = new MeshStandardMaterial(this.style.materials.ring);\n    let mesh = new Mesh(ring, material);\n    mesh.rotation.y += 0.2;\n    mesh.rotation.x += 1.4;\n    mesh.name = MeshName.RING;\n    return mesh;\n  }\n\n  private blackHoleMesh() {\n    let geometry = new TorusKnotBufferGeometry(1, 0.3, 100, 20, 9, 8);\n    let material = new MeshStandardMaterial(this.style.materials.blackhole);\n    let mesh = new Mesh(geometry, material);\n    mesh.name = MeshName.BLACKHOLE;\n    return mesh;\n  }\n\n  private faceLength(geometry: IcosahedronGeometry, face: Face3) {\n    const lenOf = (name: string) => geometry.vertices[face[name]].length();\n    return (lenOf(\"a\") + lenOf(\"b\") + lenOf(\"c\")) / 3;\n  }\n\n  private generateTerrain(terrain: IcosahedronGeometry) {\n    let noise = new Noise(this.style.name.toUpperCase(), this.style.noiseScale);\n    terrain.vertices.forEach((vertex) => {\n      let random = noise.set(vertex);\n      vertex.setLength(this.newLength(random));\n    });\n  }\n\n  private newLength(value: number) {\n    return (value - 0.5) * 2 * this.style.height + this.style.radius;\n  }\n\n  private originalLength(value: number) {\n    return (value - this.style.radius) / 2 / this.style.height + 0.5;\n  }\n\n  private paintTerrain(terrain: IcosahedronGeometry) {\n    for (const face of terrain.faces) {\n      const length = this.faceLength(terrain, face);\n      const adjustedLength = this.originalLength(length);\n      const colorRule = this.style.colors.find(\n        (color) => color.offset >= adjustedLength\n      );\n\n      const color = colorRule.color;\n      face.color = color;\n    }\n  }\n}\n","import { Planet } from './../generators/planet/planet';\nimport { MeshRenderer, MeshName } from './mesh';\nimport { DirectionalLight, Mesh, PerspectiveCamera, Scene, TextureLoader, WebGLRenderer } from \"three\";\n\nimport BG0 from './../assets/bg_0.jpg';\nimport BG1 from './../assets/bg_1.jpg';\nimport BG2 from './../assets/bg_2.jpg';\nimport BG3 from './../assets/bg_3.jpg';\nimport BG4 from './../assets/bg_4.jpg';\n\nconst backgrounds = [BG0,BG1,BG2,BG3,BG4]\n\nexport class PlanetScene {\n    init = false;\n    scene = new Scene();\n    renderer = new WebGLRenderer();\n    camera = new PerspectiveCamera(75, 1, 0.1, 1000);\n    mesh: Mesh[] = [];\n    superNovaMesh: Mesh;\n    meshRenderer = new MeshRenderer()\n    backgroundImage: string;\n\n    createScene(mount: any){\n        this.init = true;\n        this.setBackground(0)\n        this.camera.position.z = 6;\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n        mount.appendChild(this.renderer.domElement);\n        var light = new DirectionalLight(0xffffff, 0.95);\n        light.position.set(0, 2, 2).normalize();\n        this.scene.add(light);\n  \n        this.animate();\n    }\n\n    setBackground(index: number){\n      let image = backgrounds[index%backgrounds.length]\n      if(image !== this.backgroundImage) {\n        var texture = new TextureLoader().load(image)\n        this.scene.background = texture;\n        this.backgroundImage = image;\n      }\n    }\n  \n    addPlanet(planet: Planet) {\n      this.removeActiveMesh()\n      if(planet.status !== \"Not Found\") {\n        this.setBackground(planet.style.background)\n        this.mesh = this.meshRenderer.mesh(planet.status, planet.style)\n        this.mesh.forEach(mesh => this.scene.add(mesh))\n    \n        const windowWidth = window.innerWidth;\n        const sm = windowWidth;\n        const lg = Math.min((windowWidth/2)-80, window.innerHeight-75);\n        const width = windowWidth >= 960 ? lg : sm\n\n        this.renderer.domElement.style.width = `${width}px`;\n        this.renderer.domElement.style.height = `${width}px`;\n      }\n    }\n  \n    removeActiveMesh() {\n      this.mesh.forEach(mesh => this.scene.remove(mesh));\n    }\n  \n    animate() {\n      const animate = () => {\n        requestAnimationFrame(animate);\n  \n        this.mesh.forEach(mesh => {\n          if(mesh.name === MeshName.TERRAIN || mesh.name === MeshName.WATER) mesh.rotation.y += 0.005\n          if(mesh.name === MeshName.RING || mesh.name === MeshName.BLACKHOLE) mesh.rotation.z += 0.005\n        })\n    \n        this.renderer.render(this.scene, this.camera);\n      }\n\n      animate();\n    }\n  }\n\nexport const planetScene = new PlanetScene();","import { useEffect, useState } from 'react'\nimport { Observable } from 'rxjs';\n\nexport const useObservable = <T>(observable: Observable<T>) => {\n    const [state, setState] = useState<T | undefined>();\n  \n    useEffect(() => {\n      const sub = observable.subscribe(setState);\n      return () => sub.unsubscribe();\n    }, [observable]);\n  \n    return state;\n};","import React, { useRef } from \"react\";\nimport { planetScene } from \"../../renderer/scene\";\nimport { makeStyles } from \"@material-ui/core\";\nimport { useObservable } from \"src/hooks/useObservable\";\nimport { planetService } from \"src/services/planetService\";\n\nconst useStyles = makeStyles((theme) => ({\n  wrapper: {\n    overflow: 'hidden',\n    position: \"relative\",\n  },\n  banner: {\n    position: \"absolute\",\n    fontSize: \"45px\",\n    textTransform: \"uppercase\",\n    backgroundColor: \"red\",\n    color: \"white\",\n    transform: \"rotate(-40deg)\",\n    padding: \"20px 150px\",\n    top: \"70px\",\n    left: \"-135px\",\n    width: \"200px\",\n    textAlign: 'center',\n    fontFamily: [\"Anton\", \"san-serif\"].join(\",\"),\n  },\n}));\n\nexport default function PlanetRendering() {\n  const classes = useStyles();\n  const mount = useRef(null);\n  const planet = useObservable(planetService.planet$);\n\n  if (mount.current && !planetScene.init) {\n    planetScene.createScene(mount.current);\n  }\n\n  if (planet) {\n    planetScene.addPlanet(planet);\n  }\n\n  return (\n    <div className={classes.wrapper}>\n      <div className={classes.banner}>{planet?.status}</div>\n      <div ref={mount}></div>\n    </div>\n  );\n}\n","import { makeStyles } from '@material-ui/core';\nimport React from 'react'\nimport { PlanetStatus } from 'src/generators';\nimport { useObservable } from 'src/hooks/useObservable';\nimport { planetService } from 'src/services/planetService';\n\nconst useStyles = makeStyles((theme) => ({\n    details: {\n        padding: \"30px\",\n        letterSpacing: \"3px\",\n    },\n    title: {\n        fontSize: \"34px\",\n    },\n    resources: {\n        listStyle: \"none\",\n        fontSize: \"20px\",\n    },\n    resource: {\n        textTransform: \"capitalize\",\n        fontWeight: \"bold\",\n    }\n  }));\n\nconst extendedStatus = (status: PlanetStatus, name: string) => {\n    switch(status){\n        case \"Not Found\":\n            return `I'm afriad that ${name} can't be found`\n        case \"Supernova'd\":\n            return `${name} has Supernova'd. Now it looks like it may just be the beginings of a black hole`\n        default:\n            return `${status}`\n    }\n}\n\nexport default function PlanetDetails(){\n    const classes = useStyles();\n    const planet = useObservable(planetService.planet$);\n    const noDetails = planet?.status === \"Not Found\" || planet?.status === \"Supernova'd\"\n    const price = noDetails ? null : <h2 className={classes.title}>${planet?.price.toLocaleString()}</h2>;\n    const resourceTypes: (\"liquid\" | \"gas\" | \"minerals\" | \"ring\")[] = [\"minerals\", \"liquid\", \"gas\", \"ring\"]\n\n    const resources = noDetails ? null : (\n        <ul className={classes.resources}>\n            {resourceTypes.map((val, index)  => (\n                <li key={index} className={classes.resource}>{val}: {planet?.resourceLevel(val)}</li>\n            ))}\n        </ul>\n    )\n\n    return (\n        <div className={classes.details}>\n            <h1 className={classes.title}>{planet?.name}</h1>\n            {price}\n            <h2>{extendedStatus(planet?.status, planet?.name)}</h2>\n            {resources}\n        </div>\n    ) \n}","import React from \"react\";\nimport AppToolBar from \"./AppToolBar/AppToolBar\";\nimport PlanetRendering from \"./Planet/PlanetRendering\";\nimport PlanetDetails from \"./Planet/PlanetDetails\";\nimport { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  planet: {\n    display: \"grid\",\n    gridTemplateColumns: \"1fr 1fr\",\n    gridTemplateRows: \"auto 80px\",\n    [theme.breakpoints.down(\"sm\")]: {\n      display: \"flex\",\n      flexDirection: \"column\",\n    },\n  },\n  spaceBarMessage: {\n    backgroundColor: \"#ddd\",\n    padding: \"20px\",\n    textAlign: \"center\",\n    gridColumnStart: 1,\n    gridColumnEnd: 3\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <div>\n      <AppToolBar></AppToolBar>\n      <div className={classes.planet}>\n        <PlanetRendering></PlanetRendering>\n        <PlanetDetails></PlanetDetails>\n        <aside className={classes.spaceBarMessage}>\n          Click the \"Space\" Bar to randomly search through some of our planets!\n        </aside>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}